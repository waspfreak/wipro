# Start of manually maintained boilerplate

# This section is automatically generated if you use @model, but when a
# lambda function is required, you need to roll out the models autogenerated from 
# build/schema.graphql, and put them here, and moving forward maintain them manually.
# Granted, you can just remove the null in the @model directive you are using to 
# build, get the directives and then paste here.
type Mutation {
  deleteValidTopicMember(input: DeleteInput!): TopicMember @function(name: "lon-oneweb-onetask-resolvers-${env}")
}

type Query {
  search(input:SearchInput!): [SearchResult] @function(name:"searchResolverFunction-${env}") @aws_cognito_user_pools
}

type SearchResult {
  type:SearchResultType! @aws_cognito_user_pools,
  Topic:Topic @aws_cognito_user_pools,
  Message: Message @aws_cognito_user_pools,
  Activity: Activity @aws_cognito_user_pools,
  Notification: Notification @aws_cognito_user_pools,
  Mention: Mention @aws_cognito_user_pools,
  User: User @aws_cognito_user_pools
}

input SearchInput {
  type: [TopicType],
  topicId: [ID],
  ownerId: [ID],
  query: String,
  nextToken: String
}

type UserProfile {
  email: String! @aws_cognito_user_pools,
  name: String! @aws_cognito_user_pools
}

type Attachment {
  url: String!  @aws_cognito_user_pools
  type: AttachmentType!  @aws_cognito_user_pools
  description: String  @aws_cognito_user_pools #optional attachment descsription
}

input DeleteInput {
  id: ID
}

enum TopicType {
  TEAM
  PROJECT
  HQ
  MESSAGE_BOARD
  TASK
  TASK_LIST
}

enum AccessType {
  DELEGATE
  ASSIGNEE
  FOLLOWER
  MEMBER
}

# These should be all searchable types (__typename)
enum SearchResultType {
  Topic
  Message
  Activity
  Notification
  Mention
  User
}

enum AttachmentType {
  AUDIO
  VIDEO
  IMAGE
  FILE
}

# End of manually maintained boilerplate

# todo: remove the delete operations 
type User
  @model
  @auth(rules: [{ allow: public, provider: apiKey},{allow:private, operations: [create, read, update, delete]},{ allow: owner, operations:[create, read, update], ownerField: "id", identityClaim:"preferred_username" }]) {
  id: ID!
  profile: UserProfile!
  topics: [Topic] @connection(name: "TopicOwner") 
  memberships: [TopicMember] @connection(name: "TopicMemberUser")
  mentions:[Mention] @connection(name:"UserMentions")
  targets:[Mention] @connection(name:"TargetUser")
  activity: [Activity] @connection(name:"UserActivity")
  notifications: [Notification] @connection(name:"UserNotifications")
  messages: [Message] @connection(name: "MessageOwner")
  lastAccessedAt: AWSDateTime
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Topic
  @model
  @auth(rules: [{allow: public, provider: apiKey}, { allow: owner, operations:[create, read, update], ownerField: "topicOwnerId", identityClaim:"preferred_username" }]) 
  @key(name: "byTitle", fields: ["keyField","title"], queryField: "ListOfTopicsinAlphabeticalOrder"){
  id: ID!
  title: String!
  description: String
  owner: User @connection(name: "TopicOwner")
  members: [TopicMember]! @connection(name: "TopicMemberTopic")
  mentions: [Mention] @connection(name:"TopicMentions")
  parent: Topic @connection(name: "TopicParent")
  children: [Topic] @connection(name: "TopicParent")
  root: Topic @connection(name: "TopicRoot")
  nodes: [Topic] @connection(name: "TopicRoot")
  messages: [Message] @connection(name:"TopicMessages") # all the messages related to a root topic
  activity: [Activity] @connection(name:"TopicActivity")
  isDeleted: Boolean
  isRoot:Boolean
  type: TopicType!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  startedAt: AWSDateTime # applys to task types only
  endedAt: AWSDateTime # applys to task types only
  keyField: String
}

type TopicMember
  @model(mutations: {create: "createTopicMember", update: "updateTopicMember", delete: null})
  @auth(rules: [{ allow: public, provider: apiKey }, { allow: private }]) {
  id: ID!
  user: User! @connection(name: "TopicMemberUser")
  topic: Topic! @connection(name: "TopicMemberTopic")
  activity: [Activity] @connection(name:"TopicMemberActivity")
  access: AccessType!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Mention @model @auth(rules: [{ allow: public, provider: apiKey},{allow:private}]){
  id:ID!
  topic:Topic! @connection(name:"TopicMentions")
  root: Topic!
  message:Message! #The message in which the mention happened
  owner: User @connection(name:"UserMentions") #Should be set automatically in mutation resolver as auth user
  target: User @connection(name:"TargetUser") #Send in the request
  activity: [Activity] @connection(name:"MentionActivity")
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Message @model @auth(rules: [{ allow: public, provider: apiKey},{allow:private}]){
  id:ID!
  text: String!
  attachment: Attachment
  topic: Topic! @connection(name:"TopicMessages")
  owner: User @connection(name: "MessageOwner")
  # Does not require a connection to the root topic
  # topicRootId is used to authorise users to view the topic and should be the same as the associated topic.topicRootId
  topicRootId: ID! 
  activity: [Activity] @connection(name:"MessageActivity")
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Activity @model @auth(rules: [{ allow: public, provider: apiKey},{allow:private}]){
  id:ID!
  notifications: [Notification] @connection(name:"NotificationActivity")
  message: Message @connection(name:"MessageActivity")
  topic: Topic @connection(name:"TopicActivity")
  member: TopicMember @connection(name:"TopicMemberActivity")
  mention: Mention @connection(name:"MentionActivity")
  user: User @connection(name:"UserActivity")
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Notification @model @auth(rules: [{ allow: public, provider: apiKey},{allow:private}]){
  id:ID!
  activity: Activity @connection(name:"NotificationActivity")
  user: User @connection(name:"UserNotifications")
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}