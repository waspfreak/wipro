// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AppSync Stack Compiles correctly 1`] = `
Object {
  "Parameters": Object {
    "AssetParametersba6a70e83a7243470bb34e398988b31536dffcc061902d20a0a2b3f857e46506ArtifactHashD309C5EB": Object {
      "Description": "Artifact hash for asset \\"ba6a70e83a7243470bb34e398988b31536dffcc061902d20a0a2b3f857e46506\\"",
      "Type": "String",
    },
    "AssetParametersba6a70e83a7243470bb34e398988b31536dffcc061902d20a0a2b3f857e46506S3Bucket8C91D41C": Object {
      "Description": "S3 bucket for asset \\"ba6a70e83a7243470bb34e398988b31536dffcc061902d20a0a2b3f857e46506\\"",
      "Type": "String",
    },
    "AssetParametersba6a70e83a7243470bb34e398988b31536dffcc061902d20a0a2b3f857e46506S3VersionKey7F07FB28": Object {
      "Description": "S3 key for asset version \\"ba6a70e83a7243470bb34e398988b31536dffcc061902d20a0a2b3f857e46506\\"",
      "Type": "String",
    },
  },
  "Resources": Object {
    "deleteValidTopicMemberResolver161B8AA6": Object {
      "DependsOn": Array [
        "deleteValidTopicMemberResolverServiceRoleD0C541CA",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "AssetParametersba6a70e83a7243470bb34e398988b31536dffcc061902d20a0a2b3f857e46506S3Bucket8C91D41C",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParametersba6a70e83a7243470bb34e398988b31536dffcc061902d20a0a2b3f857e46506S3VersionKey7F07FB28",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParametersba6a70e83a7243470bb34e398988b31536dffcc061902d20a0a2b3f857e46506S3VersionKey7F07FB28",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Environment": Object {
          "Variables": Object {
            "REGION": "eu-west-2",
            "TOPIC_MEMBER_TABLE": Object {
              "Fn::ImportValue": "dynamodb:ExportsOutputReftopicsMemberTableEAC2634F7251B2E8",
            },
          },
        },
        "FunctionName": "deleteValidTopicMemberResolver",
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "deleteValidTopicMemberResolverServiceRoleD0C541CA",
            "Arn",
          ],
        },
        "Runtime": "nodejs10.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "deleteValidTopicMemberResolverServiceRoleD0C541CA": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "onetaskundefinedappsyncActivityDSDSE2EC4BD4": Object {
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "Description": "The activity data source",
        "DynamoDBConfig": Object {
          "AwsRegion": "eu-west-2",
          "TableName": Object {
            "Fn::ImportValue": "dynamodb:ExportsOutputRefactivityTable9CBB4D5068C4CFB5",
          },
        },
        "Name": "ActivityDS",
        "ServiceRoleArn": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncActivityDSDSServiceRoleCD459766",
            "Arn",
          ],
        },
        "Type": "AMAZON_DYNAMODB",
      },
      "Type": "AWS::AppSync::DataSource",
    },
    "onetaskundefinedappsyncActivityDSDSMentionactivityResolver5A56A779": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncActivityDSDSE2EC4BD4",
        "onetaskundefinedappsyncSchema3C62815F",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "ActivityDS",
        "FieldName": "activity",
        "Kind": "UNIT",
        "RequestMappingTemplate": "#set( $limit = $util.defaultIfNull($context.args.limit, 10) )
#set( $query = {
  \\"expression\\": \\"#connectionAttribute = :connectionAttribute\\",
  \\"expressionNames\\": {
      \\"#connectionAttribute\\": \\"activityMentionId\\"
  },
  \\"expressionValues\\": {
      \\":connectionAttribute\\": {
          \\"S\\": \\"$context.source.id\\"
    }
  }
} )
{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"Query\\",
  \\"query\\":   $util.toJson($query),
  \\"scanIndexForward\\":   #if( $context.args.sortDirection )
    #if( $context.args.sortDirection == \\"ASC\\" )
true
    #else
false
    #end
  #else
true
  #end,
  \\"filter\\":   #if( $context.args.filter )
$util.transform.toDynamoDBFilterExpression($ctx.args.filter)
  #else
null
  #end,
  \\"limit\\": $limit,
  \\"nextToken\\":   #if( $context.args.nextToken )
\\"$context.args.nextToken\\"
  #else
null
  #end,
  \\"index\\": \\"gsi-MentionActivity\\"
}",
        "ResponseMappingTemplate": "#if( !$result )
  #set( $result = $ctx.result )
#end
$util.toJson($result)",
        "TypeName": "Mention",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsyncActivityDSDSMessageactivityResolverA29D47DA": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncActivityDSDSE2EC4BD4",
        "onetaskundefinedappsyncSchema3C62815F",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "ActivityDS",
        "FieldName": "activity",
        "Kind": "UNIT",
        "RequestMappingTemplate": "#set( $limit = $util.defaultIfNull($context.args.limit, 10) )
#set( $query = {
  \\"expression\\": \\"#connectionAttribute = :connectionAttribute\\",
  \\"expressionNames\\": {
      \\"#connectionAttribute\\": \\"activityMessageId\\"
  },
  \\"expressionValues\\": {
      \\":connectionAttribute\\": {
          \\"S\\": \\"$context.source.id\\"
    }
  }
} )
{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"Query\\",
  \\"query\\":   $util.toJson($query),
  \\"scanIndexForward\\":   #if( $context.args.sortDirection )
    #if( $context.args.sortDirection == \\"ASC\\" )
true
    #else
false
    #end
  #else
true
  #end,
  \\"filter\\":   #if( $context.args.filter )
$util.transform.toDynamoDBFilterExpression($ctx.args.filter)
  #else
null
  #end,
  \\"limit\\": $limit,
  \\"nextToken\\":   #if( $context.args.nextToken )
\\"$context.args.nextToken\\"
  #else
null
  #end,
  \\"index\\": \\"gsi-MessageActivity\\"
}",
        "ResponseMappingTemplate": "#if( !$result )
  #set( $result = $ctx.result )
#end
$util.toJson($result)",
        "TypeName": "Message",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsyncActivityDSDSMutationcreateActivityResolverF63CF777": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncActivityDSDSE2EC4BD4",
        "onetaskundefinedappsyncSchema3C62815F",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "ActivityDS",
        "FieldName": "createActivity",
        "Kind": "UNIT",
        "RequestMappingTemplate": "## [Start] Prepare DynamoDB PutItem Request. **
$util.qr($context.args.input.put(\\"createdAt\\", $util.defaultIfNull($ctx.args.input.createdAt, $util.time.nowISO8601())))
$util.qr($context.args.input.put(\\"updatedAt\\", $util.defaultIfNull($ctx.args.input.updatedAt, $util.time.nowISO8601())))
$util.qr($context.args.input.put(\\"__typename\\", \\"Activity\\"))
#set( $condition = {
  \\"expression\\": \\"attribute_not_exists(#id)\\",
  \\"expressionNames\\": {
      \\"#id\\": \\"id\\"
  }
} )
#if( $context.args.condition )
  #set( $condition.expressionValues = {} )
  #set( $conditionFilterExpressions = $util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition)) )
  $util.qr($condition.put(\\"expression\\", \\"($condition.expression) AND $conditionFilterExpressions.expression\\"))
  $util.qr($condition.expressionNames.putAll($conditionFilterExpressions.expressionNames))
  $util.qr($condition.expressionValues.putAll($conditionFilterExpressions.expressionValues))
#end
#if( $condition.expressionValues && $condition.expressionValues.size() == 0 )
  #set( $condition = {
  \\"expression\\": $condition.expression,
  \\"expressionNames\\": $condition.expressionNames
} )
#end
{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"PutItem\\",
  \\"key\\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {
  \\"id\\":   $util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank($ctx.args.input.id, $util.autoId()))
} #end,
  \\"attributeValues\\": $util.dynamodb.toMapValuesJson($context.args.input),
  \\"condition\\": $util.toJson($condition)
}
## [End] Prepare DynamoDB PutItem Request. **",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)",
        "TypeName": "Mutation",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsyncActivityDSDSMutationdeleteActivityResolverCEF7BDF4": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncActivityDSDSE2EC4BD4",
        "onetaskundefinedappsyncSchema3C62815F",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "ActivityDS",
        "FieldName": "deleteActivity",
        "Kind": "UNIT",
        "RequestMappingTemplate": "#if( $authCondition )
  #set( $condition = $authCondition )
  #if( $modelObjectKey )
    #foreach( $entry in $modelObjectKey.entrySet() )
      $util.qr($condition.put(\\"expression\\", \\"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\\"))
      $util.qr($condition.expressionNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
    #end
  #else
    $util.qr($condition.put(\\"expression\\", \\"$condition.expression AND attribute_exists(#id)\\"))
    $util.qr($condition.expressionNames.put(\\"#id\\", \\"id\\"))
  #end
#else
  #if( $modelObjectKey )
    #set( $condition = {
  \\"expression\\": \\"\\",
  \\"expressionNames\\": {}
} )
    #foreach( $entry in $modelObjectKey.entrySet() )
      #if( $velocityCount == 1 )
        $util.qr($condition.put(\\"expression\\", \\"attribute_exists(#keyCondition$velocityCount)\\"))
      #else
        $util.qr($condition.put(\\"expression\\", \\"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\\"))
      #end
      $util.qr($condition.expressionNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
    #end
  #else
    #set( $condition = {
  \\"expression\\": \\"attribute_exists(#id)\\",
  \\"expressionNames\\": {
      \\"#id\\": \\"id\\"
  }
} )
  #end
#end
#if( $versionedCondition )
  $util.qr($condition.put(\\"expression\\", \\"($condition.expression) AND $versionedCondition.expression\\"))
  $util.qr($condition.expressionNames.putAll($versionedCondition.expressionNames))
  #set( $expressionValues = $util.defaultIfNull($condition.expressionValues, {}) )
  $util.qr($expressionValues.putAll($versionedCondition.expressionValues))
  #set( $condition.expressionValues = $expressionValues )
#end
#if( $context.args.condition )
  #set( $conditionFilterExpressions = $util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition)) )
  $util.qr($condition.put(\\"expression\\", \\"($condition.expression) AND $conditionFilterExpressions.expression\\"))
  $util.qr($condition.expressionNames.putAll($conditionFilterExpressions.expressionNames))
  #set( $conditionExpressionValues = $util.defaultIfNull($condition.expressionValues, {}) )
  $util.qr($conditionExpressionValues.putAll($conditionFilterExpressions.expressionValues))
  #set( $condition.expressionValues = $conditionExpressionValues )
  $util.qr($condition.expressionValues.putAll($conditionFilterExpressions.expressionValues))
#end
#if( $condition.expressionValues && $condition.expressionValues.size() == 0 )
  #set( $condition = {
  \\"expression\\": $condition.expression,
  \\"expressionNames\\": $condition.expressionNames
} )
#end
{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"DeleteItem\\",
  \\"key\\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {
  \\"id\\": $util.dynamodb.toDynamoDBJson($ctx.args.input.id)
} #end,
  \\"condition\\": $util.toJson($condition)
}",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)",
        "TypeName": "Mutation",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsyncActivityDSDSMutationupdateActivityResolver352D5FAF": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncActivityDSDSE2EC4BD4",
        "onetaskundefinedappsyncSchema3C62815F",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "ActivityDS",
        "FieldName": "updateActivity",
        "Kind": "UNIT",
        "RequestMappingTemplate": "#if( $authCondition && $authCondition.expression != \\"\\" )
  #set( $condition = $authCondition )
  #if( $modelObjectKey )
    #foreach( $entry in $modelObjectKey.entrySet() )
      $util.qr($condition.put(\\"expression\\", \\"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\\"))
      $util.qr($condition.expressionNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
    #end
  #else
    $util.qr($condition.put(\\"expression\\", \\"$condition.expression AND attribute_exists(#id)\\"))
    $util.qr($condition.expressionNames.put(\\"#id\\", \\"id\\"))
  #end
#else
  #if( $modelObjectKey )
    #set( $condition = {
  \\"expression\\": \\"\\",
  \\"expressionNames\\": {},
  \\"expressionValues\\": {}
} )
    #foreach( $entry in $modelObjectKey.entrySet() )
      #if( $velocityCount == 1 )
        $util.qr($condition.put(\\"expression\\", \\"attribute_exists(#keyCondition$velocityCount)\\"))
      #else
        $util.qr($condition.put(\\"expression\\", \\"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\\"))
      #end
      $util.qr($condition.expressionNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
    #end
  #else
    #set( $condition = {
  \\"expression\\": \\"attribute_exists(#id)\\",
  \\"expressionNames\\": {
      \\"#id\\": \\"id\\"
  },
  \\"expressionValues\\": {}
} )
  #end
#end
## Automatically set the updatedAt timestamp. **
$util.qr($context.args.input.put(\\"updatedAt\\", $util.defaultIfNull($ctx.args.input.updatedAt, $util.time.nowISO8601())))
$util.qr($context.args.input.put(\\"__typename\\", \\"Activity\\"))
## Update condition if type is @versioned **
#if( $versionedCondition )
  $util.qr($condition.put(\\"expression\\", \\"($condition.expression) AND $versionedCondition.expression\\"))
  $util.qr($condition.expressionNames.putAll($versionedCondition.expressionNames))
  $util.qr($condition.expressionValues.putAll($versionedCondition.expressionValues))
#end
#if( $context.args.condition )
  #set( $conditionFilterExpressions = $util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition)) )
  $util.qr($condition.put(\\"expression\\", \\"($condition.expression) AND $conditionFilterExpressions.expression\\"))
  $util.qr($condition.expressionNames.putAll($conditionFilterExpressions.expressionNames))
  $util.qr($condition.expressionValues.putAll($conditionFilterExpressions.expressionValues))
#end
#if( $condition.expressionValues && $condition.expressionValues.size() == 0 )
  #set( $condition = {
  \\"expression\\": $condition.expression,
  \\"expressionNames\\": $condition.expressionNames
} )
#end
#set( $expNames = {} )
#set( $expValues = {} )
#set( $expSet = {} )
#set( $expAdd = {} )
#set( $expRemove = [] )
#if( $modelObjectKey )
  #set( $keyFields = [] )
  #foreach( $entry in $modelObjectKey.entrySet() )
    $util.qr($keyFields.add(\\"$entry.key\\"))
  #end
#else
  #set( $keyFields = [\\"id\\"] )
#end
#foreach( $entry in $util.map.copyAndRemoveAllKeys($context.args.input, $keyFields).entrySet() )
  #if( !$util.isNull($dynamodbNameOverrideMap) && $dynamodbNameOverrideMap.containsKey(\\"$entry.key\\") )
    #set( $entryKeyAttributeName = $dynamodbNameOverrideMap.get(\\"$entry.key\\") )
  #else
    #set( $entryKeyAttributeName = $entry.key )
  #end
  #if( $util.isNull($entry.value) )
    #set( $discard = $expRemove.add(\\"#$entryKeyAttributeName\\") )
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
  #else
    $util.qr($expSet.put(\\"#$entryKeyAttributeName\\", \\":$entryKeyAttributeName\\"))
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
    $util.qr($expValues.put(\\":$entryKeyAttributeName\\", $util.dynamodb.toDynamoDB($entry.value)))
  #end
#end
#set( $expression = \\"\\" )
#if( !$expSet.isEmpty() )
  #set( $expression = \\"SET\\" )
  #foreach( $entry in $expSet.entrySet() )
    #set( $expression = \\"$expression $entry.key = $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expAdd.isEmpty() )
  #set( $expression = \\"$expression ADD\\" )
  #foreach( $entry in $expAdd.entrySet() )
    #set( $expression = \\"$expression $entry.key $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expRemove.isEmpty() )
  #set( $expression = \\"$expression REMOVE\\" )
  #foreach( $entry in $expRemove )
    #set( $expression = \\"$expression $entry\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#set( $update = {} )
$util.qr($update.put(\\"expression\\", \\"$expression\\"))
#if( !$expNames.isEmpty() )
  $util.qr($update.put(\\"expressionNames\\", $expNames))
#end
#if( !$expValues.isEmpty() )
  $util.qr($update.put(\\"expressionValues\\", $expValues))
#end
{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"UpdateItem\\",
  \\"key\\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {
  \\"id\\": {
      \\"S\\": \\"$context.args.input.id\\"
  }
} #end,
  \\"update\\": $util.toJson($update),
  \\"condition\\": $util.toJson($condition)
}",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)",
        "TypeName": "Mutation",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsyncActivityDSDSNotificationactivityResolverCA509C66": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncActivityDSDSE2EC4BD4",
        "onetaskundefinedappsyncSchema3C62815F",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "ActivityDS",
        "FieldName": "activity",
        "Kind": "UNIT",
        "RequestMappingTemplate": "{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"GetItem\\",
  \\"key\\": {
      \\"id\\": $util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank($ctx.source.notificationActivityId, \\"___xamznone____\\"))
  }
}",
        "ResponseMappingTemplate": "$util.toJson($context.result)",
        "TypeName": "Notification",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsyncActivityDSDSQuerygetActivityResolverEF70D34D": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncActivityDSDSE2EC4BD4",
        "onetaskundefinedappsyncSchema3C62815F",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "ActivityDS",
        "FieldName": "getActivity",
        "Kind": "UNIT",
        "RequestMappingTemplate": "{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"GetItem\\",
  \\"key\\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {
  \\"id\\": $util.dynamodb.toDynamoDBJson($ctx.args.id)
} #end
}",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)",
        "TypeName": "Query",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsyncActivityDSDSQuerylistActivitysResolver539CD622": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncActivityDSDSE2EC4BD4",
        "onetaskundefinedappsyncSchema3C62815F",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "ActivityDS",
        "FieldName": "listActivitys",
        "Kind": "UNIT",
        "RequestMappingTemplate": "#set( $limit = $util.defaultIfNull($context.args.limit, 10) )
#set( $ListRequest = {
  \\"version\\": \\"2017-02-28\\",
  \\"limit\\": $limit
} )
#if( $context.args.nextToken )
  #set( $ListRequest.nextToken = \\"$context.args.nextToken\\" )
#end
#if( $context.args.filter )
  #set( $ListRequest.filter = $util.parseJson(\\"$util.transform.toDynamoDBFilterExpression($ctx.args.filter)\\") )
#end
#if( !$util.isNull($modelQueryExpression)
                        && !$util.isNullOrEmpty($modelQueryExpression.expression) )
  $util.qr($ListRequest.put(\\"operation\\", \\"Query\\"))
  $util.qr($ListRequest.put(\\"query\\", $modelQueryExpression))
  #if( !$util.isNull($ctx.args.sortDirection) && $ctx.args.sortDirection == \\"DESC\\" )
    #set( $ListRequest.scanIndexForward = false )
  #else
    #set( $ListRequest.scanIndexForward = true )
  #end
#else
  $util.qr($ListRequest.put(\\"operation\\", \\"Scan\\"))
#end
$util.toJson($ListRequest)",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)",
        "TypeName": "Query",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsyncActivityDSDSServiceRoleCD459766": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "appsync.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "onetaskundefinedappsyncActivityDSDSServiceRoleDefaultPolicyAB4AFDD4": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::ImportValue": "dynamodb:ExportsOutputFnGetAttactivityTable9CBB4D50ArnFF430B6C",
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::ImportValue": "dynamodb:ExportsOutputFnGetAttactivityTable9CBB4D50ArnFF430B6C",
                      },
                      "/index/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "onetaskundefinedappsyncActivityDSDSServiceRoleDefaultPolicyAB4AFDD4",
        "Roles": Array [
          Object {
            "Ref": "onetaskundefinedappsyncActivityDSDSServiceRoleCD459766",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "onetaskundefinedappsyncActivityDSDSTopicMemberactivityResolverCAE003DD": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncActivityDSDSE2EC4BD4",
        "onetaskundefinedappsyncSchema3C62815F",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "ActivityDS",
        "FieldName": "activity",
        "Kind": "UNIT",
        "RequestMappingTemplate": "#set( $limit = $util.defaultIfNull($context.args.limit, 10) )
#set( $query = {
  \\"expression\\": \\"#connectionAttribute = :connectionAttribute\\",
  \\"expressionNames\\": {
      \\"#connectionAttribute\\": \\"activityMemberId\\"
  },
  \\"expressionValues\\": {
      \\":connectionAttribute\\": {
          \\"S\\": \\"$context.source.id\\"
    }
  }
} )
{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"Query\\",
  \\"query\\":   $util.toJson($query),
  \\"scanIndexForward\\":   #if( $context.args.sortDirection )
    #if( $context.args.sortDirection == \\"ASC\\" )
true
    #else
false
    #end
  #else
true
  #end,
  \\"filter\\":   #if( $context.args.filter )
$util.transform.toDynamoDBFilterExpression($ctx.args.filter)
  #else
null
  #end,
  \\"limit\\": $limit,
  \\"nextToken\\":   #if( $context.args.nextToken )
\\"$context.args.nextToken\\"
  #else
null
  #end,
  \\"index\\": \\"gsi-TopicMemberActivity\\"
}",
        "ResponseMappingTemplate": "#if( !$result )
  #set( $result = $ctx.result )
#end
$util.toJson($result)",
        "TypeName": "TopicMember",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsyncActivityDSDSTopicactivityResolver8AB80D8F": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncActivityDSDSE2EC4BD4",
        "onetaskundefinedappsyncSchema3C62815F",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "ActivityDS",
        "FieldName": "activity",
        "Kind": "UNIT",
        "RequestMappingTemplate": "#set( $limit = $util.defaultIfNull($context.args.limit, 10) )
#set( $query = {
  \\"expression\\": \\"#connectionAttribute = :connectionAttribute\\",
  \\"expressionNames\\": {
      \\"#connectionAttribute\\": \\"activityTopicId\\"
  },
  \\"expressionValues\\": {
      \\":connectionAttribute\\": {
          \\"S\\": \\"$context.source.id\\"
    }
  }
} )
{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"Query\\",
  \\"query\\":   $util.toJson($query),
  \\"scanIndexForward\\":   #if( $context.args.sortDirection )
    #if( $context.args.sortDirection == \\"ASC\\" )
true
    #else
false
    #end
  #else
true
  #end,
  \\"filter\\":   #if( $context.args.filter )
$util.transform.toDynamoDBFilterExpression($ctx.args.filter)
  #else
null
  #end,
  \\"limit\\": $limit,
  \\"nextToken\\":   #if( $context.args.nextToken )
\\"$context.args.nextToken\\"
  #else
null
  #end,
  \\"index\\": \\"gsi-TopicActivity\\"
}",
        "ResponseMappingTemplate": "#if( !$result )
  #set( $result = $ctx.result )
#end
$util.toJson($result)",
        "TypeName": "Topic",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsyncActivityDSDSUseractivityResolverE3188E1B": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncActivityDSDSE2EC4BD4",
        "onetaskundefinedappsyncSchema3C62815F",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "ActivityDS",
        "FieldName": "activity",
        "Kind": "UNIT",
        "RequestMappingTemplate": "#set( $limit = $util.defaultIfNull($context.args.limit, 10) )
#set( $query = {
  \\"expression\\": \\"#connectionAttribute = :connectionAttribute\\",
  \\"expressionNames\\": {
      \\"#connectionAttribute\\": \\"activityUserId\\"
  },
  \\"expressionValues\\": {
      \\":connectionAttribute\\": {
          \\"S\\": \\"$context.source.id\\"
    }
  }
} )
{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"Query\\",
  \\"query\\":   $util.toJson($query),
  \\"scanIndexForward\\":   #if( $context.args.sortDirection )
    #if( $context.args.sortDirection == \\"ASC\\" )
true
    #else
false
    #end
  #else
true
  #end,
  \\"filter\\":   #if( $context.args.filter )
$util.transform.toDynamoDBFilterExpression($ctx.args.filter)
  #else
null
  #end,
  \\"limit\\": $limit,
  \\"nextToken\\":   #if( $context.args.nextToken )
\\"$context.args.nextToken\\"
  #else
null
  #end,
  \\"index\\": \\"gsi-UserActivity\\"
}",
        "ResponseMappingTemplate": "#if( !$result )
  #set( $result = $ctx.result )
#end
$util.toJson($result)",
        "TypeName": "User",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsyncApiLogsRoleB5371B87": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "appsync.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSAppSyncPushToCloudWatchLogs",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "onetaskundefinedappsyncFF22C18A": Object {
      "Properties": Object {
        "AuthenticationType": "AMAZON_COGNITO_USER_POOLS",
        "LogConfig": Object {
          "CloudWatchLogsRoleArn": Object {
            "Fn::GetAtt": Array [
              "onetaskundefinedappsyncApiLogsRoleB5371B87",
              "Arn",
            ],
          },
          "FieldLogLevel": "ALL",
        },
        "Name": "onetask-undefined-appsync-cdk",
        "UserPoolConfig": Object {
          "AwsRegion": "eu-west-2",
          "DefaultAction": "ALLOW",
          "UserPoolId": Object {
            "Fn::ImportValue": "auth:ExportsOutputRefauthuserpool56A639C7DF13EB0D",
          },
        },
      },
      "Type": "AWS::AppSync::GraphQLApi",
    },
    "onetaskundefinedappsyncMentionDSDS69B418B0": Object {
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "Description": "Data source for Mention Table",
        "DynamoDBConfig": Object {
          "AwsRegion": "eu-west-2",
          "TableName": Object {
            "Fn::ImportValue": "dynamodb:ExportsOutputRefmentionTable3BCAB4D9C8D72CB2",
          },
        },
        "Name": "MentionDS",
        "ServiceRoleArn": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncMentionDSDSServiceRole7439B06C",
            "Arn",
          ],
        },
        "Type": "AMAZON_DYNAMODB",
      },
      "Type": "AWS::AppSync::DataSource",
    },
    "onetaskundefinedappsyncMentionDSDSActivitymentionResolver19575B1B": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncMentionDSDS69B418B0",
        "onetaskundefinedappsyncSchema3C62815F",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "MentionDS",
        "FieldName": "mention",
        "Kind": "UNIT",
        "RequestMappingTemplate": "{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"GetItem\\",
  \\"key\\": {
      \\"id\\": $util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank($ctx.source.activityMentionId, \\"___xamznone____\\"))
  }
}",
        "ResponseMappingTemplate": "$util.toJson($context.result)",
        "TypeName": "Activity",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsyncMentionDSDSMutationcreateMentionResolver266E14F2": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncMentionDSDS69B418B0",
        "onetaskundefinedappsyncSchema3C62815F",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "MentionDS",
        "FieldName": "createMention",
        "Kind": "UNIT",
        "RequestMappingTemplate": "## [Start] Prepare DynamoDB PutItem Request. **
$util.qr($context.args.input.put(\\"createdAt\\", $util.defaultIfNull($ctx.args.input.createdAt, $util.time.nowISO8601())))
$util.qr($context.args.input.put(\\"updatedAt\\", $util.defaultIfNull($ctx.args.input.updatedAt, $util.time.nowISO8601())))
$util.qr($context.args.input.put(\\"__typename\\", \\"Mention\\"))
#set( $condition = {
  \\"expression\\": \\"attribute_not_exists(#id)\\",
  \\"expressionNames\\": {
      \\"#id\\": \\"id\\"
  }
} )
#if( $context.args.condition )
  #set( $condition.expressionValues = {} )
  #set( $conditionFilterExpressions = $util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition)) )
  $util.qr($condition.put(\\"expression\\", \\"($condition.expression) AND $conditionFilterExpressions.expression\\"))
  $util.qr($condition.expressionNames.putAll($conditionFilterExpressions.expressionNames))
  $util.qr($condition.expressionValues.putAll($conditionFilterExpressions.expressionValues))
#end
#if( $condition.expressionValues && $condition.expressionValues.size() == 0 )
  #set( $condition = {
  \\"expression\\": $condition.expression,
  \\"expressionNames\\": $condition.expressionNames
} )
#end
{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"PutItem\\",
  \\"key\\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {
  \\"id\\":   $util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank($ctx.args.input.id, $util.autoId()))
} #end,
  \\"attributeValues\\": $util.dynamodb.toMapValuesJson($context.args.input),
  \\"condition\\": $util.toJson($condition)
}
## [End] Prepare DynamoDB PutItem Request. **",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)",
        "TypeName": "Mutation",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsyncMentionDSDSMutationdeleteMentionResolver133B7542": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncMentionDSDS69B418B0",
        "onetaskundefinedappsyncSchema3C62815F",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "MentionDS",
        "FieldName": "deleteMention",
        "Kind": "UNIT",
        "RequestMappingTemplate": "#if( $authCondition )
  #set( $condition = $authCondition )
  #if( $modelObjectKey )
    #foreach( $entry in $modelObjectKey.entrySet() )
      $util.qr($condition.put(\\"expression\\", \\"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\\"))
      $util.qr($condition.expressionNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
    #end
  #else
    $util.qr($condition.put(\\"expression\\", \\"$condition.expression AND attribute_exists(#id)\\"))
    $util.qr($condition.expressionNames.put(\\"#id\\", \\"id\\"))
  #end
#else
  #if( $modelObjectKey )
    #set( $condition = {
  \\"expression\\": \\"\\",
  \\"expressionNames\\": {}
} )
    #foreach( $entry in $modelObjectKey.entrySet() )
      #if( $velocityCount == 1 )
        $util.qr($condition.put(\\"expression\\", \\"attribute_exists(#keyCondition$velocityCount)\\"))
      #else
        $util.qr($condition.put(\\"expression\\", \\"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\\"))
      #end
      $util.qr($condition.expressionNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
    #end
  #else
    #set( $condition = {
  \\"expression\\": \\"attribute_exists(#id)\\",
  \\"expressionNames\\": {
      \\"#id\\": \\"id\\"
  }
} )
  #end
#end
#if( $versionedCondition )
  $util.qr($condition.put(\\"expression\\", \\"($condition.expression) AND $versionedCondition.expression\\"))
  $util.qr($condition.expressionNames.putAll($versionedCondition.expressionNames))
  #set( $expressionValues = $util.defaultIfNull($condition.expressionValues, {}) )
  $util.qr($expressionValues.putAll($versionedCondition.expressionValues))
  #set( $condition.expressionValues = $expressionValues )
#end
#if( $context.args.condition )
  #set( $conditionFilterExpressions = $util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition)) )
  $util.qr($condition.put(\\"expression\\", \\"($condition.expression) AND $conditionFilterExpressions.expression\\"))
  $util.qr($condition.expressionNames.putAll($conditionFilterExpressions.expressionNames))
  #set( $conditionExpressionValues = $util.defaultIfNull($condition.expressionValues, {}) )
  $util.qr($conditionExpressionValues.putAll($conditionFilterExpressions.expressionValues))
  #set( $condition.expressionValues = $conditionExpressionValues )
  $util.qr($condition.expressionValues.putAll($conditionFilterExpressions.expressionValues))
#end
#if( $condition.expressionValues && $condition.expressionValues.size() == 0 )
  #set( $condition = {
  \\"expression\\": $condition.expression,
  \\"expressionNames\\": $condition.expressionNames
} )
#end
{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"DeleteItem\\",
  \\"key\\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {
  \\"id\\": $util.dynamodb.toDynamoDBJson($ctx.args.input.id)
} #end,
  \\"condition\\": $util.toJson($condition)
}",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)",
        "TypeName": "Mutation",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsyncMentionDSDSMutationupdateMentionResolver9BDBE270": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncMentionDSDS69B418B0",
        "onetaskundefinedappsyncSchema3C62815F",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "MentionDS",
        "FieldName": "updateMention",
        "Kind": "UNIT",
        "RequestMappingTemplate": "#if( $authCondition && $authCondition.expression != \\"\\" )
  #set( $condition = $authCondition )
  #if( $modelObjectKey )
    #foreach( $entry in $modelObjectKey.entrySet() )
      $util.qr($condition.put(\\"expression\\", \\"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\\"))
      $util.qr($condition.expressionNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
    #end
  #else
    $util.qr($condition.put(\\"expression\\", \\"$condition.expression AND attribute_exists(#id)\\"))
    $util.qr($condition.expressionNames.put(\\"#id\\", \\"id\\"))
  #end
#else
  #if( $modelObjectKey )
    #set( $condition = {
  \\"expression\\": \\"\\",
  \\"expressionNames\\": {},
  \\"expressionValues\\": {}
} )
    #foreach( $entry in $modelObjectKey.entrySet() )
      #if( $velocityCount == 1 )
        $util.qr($condition.put(\\"expression\\", \\"attribute_exists(#keyCondition$velocityCount)\\"))
      #else
        $util.qr($condition.put(\\"expression\\", \\"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\\"))
      #end
      $util.qr($condition.expressionNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
    #end
  #else
    #set( $condition = {
  \\"expression\\": \\"attribute_exists(#id)\\",
  \\"expressionNames\\": {
      \\"#id\\": \\"id\\"
  },
  \\"expressionValues\\": {}
} )
  #end
#end
## Automatically set the updatedAt timestamp. **
$util.qr($context.args.input.put(\\"updatedAt\\", $util.defaultIfNull($ctx.args.input.updatedAt, $util.time.nowISO8601())))
$util.qr($context.args.input.put(\\"__typename\\", \\"Mention\\"))
## Update condition if type is @versioned **
#if( $versionedCondition )
  $util.qr($condition.put(\\"expression\\", \\"($condition.expression) AND $versionedCondition.expression\\"))
  $util.qr($condition.expressionNames.putAll($versionedCondition.expressionNames))
  $util.qr($condition.expressionValues.putAll($versionedCondition.expressionValues))
#end
#if( $context.args.condition )
  #set( $conditionFilterExpressions = $util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition)) )
  $util.qr($condition.put(\\"expression\\", \\"($condition.expression) AND $conditionFilterExpressions.expression\\"))
  $util.qr($condition.expressionNames.putAll($conditionFilterExpressions.expressionNames))
  $util.qr($condition.expressionValues.putAll($conditionFilterExpressions.expressionValues))
#end
#if( $condition.expressionValues && $condition.expressionValues.size() == 0 )
  #set( $condition = {
  \\"expression\\": $condition.expression,
  \\"expressionNames\\": $condition.expressionNames
} )
#end
#set( $expNames = {} )
#set( $expValues = {} )
#set( $expSet = {} )
#set( $expAdd = {} )
#set( $expRemove = [] )
#if( $modelObjectKey )
  #set( $keyFields = [] )
  #foreach( $entry in $modelObjectKey.entrySet() )
    $util.qr($keyFields.add(\\"$entry.key\\"))
  #end
#else
  #set( $keyFields = [\\"id\\"] )
#end
#foreach( $entry in $util.map.copyAndRemoveAllKeys($context.args.input, $keyFields).entrySet() )
  #if( !$util.isNull($dynamodbNameOverrideMap) && $dynamodbNameOverrideMap.containsKey(\\"$entry.key\\") )
    #set( $entryKeyAttributeName = $dynamodbNameOverrideMap.get(\\"$entry.key\\") )
  #else
    #set( $entryKeyAttributeName = $entry.key )
  #end
  #if( $util.isNull($entry.value) )
    #set( $discard = $expRemove.add(\\"#$entryKeyAttributeName\\") )
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
  #else
    $util.qr($expSet.put(\\"#$entryKeyAttributeName\\", \\":$entryKeyAttributeName\\"))
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
    $util.qr($expValues.put(\\":$entryKeyAttributeName\\", $util.dynamodb.toDynamoDB($entry.value)))
  #end
#end
#set( $expression = \\"\\" )
#if( !$expSet.isEmpty() )
  #set( $expression = \\"SET\\" )
  #foreach( $entry in $expSet.entrySet() )
    #set( $expression = \\"$expression $entry.key = $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expAdd.isEmpty() )
  #set( $expression = \\"$expression ADD\\" )
  #foreach( $entry in $expAdd.entrySet() )
    #set( $expression = \\"$expression $entry.key $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expRemove.isEmpty() )
  #set( $expression = \\"$expression REMOVE\\" )
  #foreach( $entry in $expRemove )
    #set( $expression = \\"$expression $entry\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#set( $update = {} )
$util.qr($update.put(\\"expression\\", \\"$expression\\"))
#if( !$expNames.isEmpty() )
  $util.qr($update.put(\\"expressionNames\\", $expNames))
#end
#if( !$expValues.isEmpty() )
  $util.qr($update.put(\\"expressionValues\\", $expValues))
#end
{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"UpdateItem\\",
  \\"key\\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {
  \\"id\\": {
      \\"S\\": \\"$context.args.input.id\\"
  }
} #end,
  \\"update\\": $util.toJson($update),
  \\"condition\\": $util.toJson($condition)
}",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)",
        "TypeName": "Mutation",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsyncMentionDSDSQuerygetMentionResolver5340351E": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncMentionDSDS69B418B0",
        "onetaskundefinedappsyncSchema3C62815F",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "MentionDS",
        "FieldName": "getMention",
        "Kind": "UNIT",
        "RequestMappingTemplate": "{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"GetItem\\",
  \\"key\\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {
  \\"id\\": $util.dynamodb.toDynamoDBJson($ctx.args.id)
} #end
}",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)",
        "TypeName": "Query",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsyncMentionDSDSQuerylistMentionsResolverE5371E74": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncMentionDSDS69B418B0",
        "onetaskundefinedappsyncSchema3C62815F",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "MentionDS",
        "FieldName": "listMentions",
        "Kind": "UNIT",
        "RequestMappingTemplate": "#set( $limit = $util.defaultIfNull($context.args.limit, 10) )
#set( $ListRequest = {
  \\"version\\": \\"2017-02-28\\",
  \\"limit\\": $limit
} )
#if( $context.args.nextToken )
  #set( $ListRequest.nextToken = \\"$context.args.nextToken\\" )
#end
#if( $context.args.filter )
  #set( $ListRequest.filter = $util.parseJson(\\"$util.transform.toDynamoDBFilterExpression($ctx.args.filter)\\") )
#end
#if( !$util.isNull($modelQueryExpression)
                        && !$util.isNullOrEmpty($modelQueryExpression.expression) )
  $util.qr($ListRequest.put(\\"operation\\", \\"Query\\"))
  $util.qr($ListRequest.put(\\"query\\", $modelQueryExpression))
  #if( !$util.isNull($ctx.args.sortDirection) && $ctx.args.sortDirection == \\"DESC\\" )
    #set( $ListRequest.scanIndexForward = false )
  #else
    #set( $ListRequest.scanIndexForward = true )
  #end
#else
  $util.qr($ListRequest.put(\\"operation\\", \\"Scan\\"))
#end
$util.toJson($ListRequest)",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)",
        "TypeName": "Query",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsyncMentionDSDSServiceRole7439B06C": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "appsync.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "onetaskundefinedappsyncMentionDSDSServiceRoleDefaultPolicy6D90B064": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::ImportValue": "dynamodb:ExportsOutputFnGetAttmentionTable3BCAB4D9Arn5A7268EB",
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::ImportValue": "dynamodb:ExportsOutputFnGetAttmentionTable3BCAB4D9Arn5A7268EB",
                      },
                      "/index/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "onetaskundefinedappsyncMentionDSDSServiceRoleDefaultPolicy6D90B064",
        "Roles": Array [
          Object {
            "Ref": "onetaskundefinedappsyncMentionDSDSServiceRole7439B06C",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "onetaskundefinedappsyncMentionDSDSTopicmentionsResolverA80EC809": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncMentionDSDS69B418B0",
        "onetaskundefinedappsyncSchema3C62815F",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "MentionDS",
        "FieldName": "mentions",
        "Kind": "UNIT",
        "RequestMappingTemplate": "#set( $limit = $util.defaultIfNull($context.args.limit, 10) )
#set( $query = {
  \\"expression\\": \\"#connectionAttribute = :connectionAttribute\\",
  \\"expressionNames\\": {
      \\"#connectionAttribute\\": \\"mentionTopicId\\"
  },
  \\"expressionValues\\": {
      \\":connectionAttribute\\": {
          \\"S\\": \\"$context.source.id\\"
    }
  }
} )
{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"Query\\",
  \\"query\\":   $util.toJson($query),
  \\"scanIndexForward\\":   #if( $context.args.sortDirection )
    #if( $context.args.sortDirection == \\"ASC\\" )
true
    #else
false
    #end
  #else
true
  #end,
  \\"filter\\":   #if( $context.args.filter )
$util.transform.toDynamoDBFilterExpression($ctx.args.filter)
  #else
null
  #end,
  \\"limit\\": $limit,
  \\"nextToken\\":   #if( $context.args.nextToken )
\\"$context.args.nextToken\\"
  #else
null
  #end,
  \\"index\\": \\"gsi-TopicMentions\\"
}",
        "ResponseMappingTemplate": "#if( !$result )
  #set( $result = $ctx.result )
#end
$util.toJson($result)",
        "TypeName": "Topic",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsyncMentionDSDSUsermentionsResolver1F26DD55": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncMentionDSDS69B418B0",
        "onetaskundefinedappsyncSchema3C62815F",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "MentionDS",
        "FieldName": "mentions",
        "Kind": "UNIT",
        "RequestMappingTemplate": "#set( $limit = $util.defaultIfNull($context.args.limit, 10) )
#set( $query = {
  \\"expression\\": \\"#connectionAttribute = :connectionAttribute\\",
  \\"expressionNames\\": {
      \\"#connectionAttribute\\": \\"mentionOwnerId\\"
  },
  \\"expressionValues\\": {
      \\":connectionAttribute\\": {
          \\"S\\": \\"$context.source.id\\"
    }
  }
} )
{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"Query\\",
  \\"query\\":   $util.toJson($query),
  \\"scanIndexForward\\":   #if( $context.args.sortDirection )
    #if( $context.args.sortDirection == \\"ASC\\" )
true
    #else
false
    #end
  #else
true
  #end,
  \\"filter\\":   #if( $context.args.filter )
$util.transform.toDynamoDBFilterExpression($ctx.args.filter)
  #else
null
  #end,
  \\"limit\\": $limit,
  \\"nextToken\\":   #if( $context.args.nextToken )
\\"$context.args.nextToken\\"
  #else
null
  #end,
  \\"index\\": \\"gsi-UserMentions\\"
}",
        "ResponseMappingTemplate": "#if( !$result )
  #set( $result = $ctx.result )
#end
$util.toJson($result)",
        "TypeName": "User",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsyncMentionDSDSUsertargetsResolver1090098B": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncMentionDSDS69B418B0",
        "onetaskundefinedappsyncSchema3C62815F",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "MentionDS",
        "FieldName": "targets",
        "Kind": "UNIT",
        "RequestMappingTemplate": "#set( $limit = $util.defaultIfNull($context.args.limit, 10) )
#set( $query = {
  \\"expression\\": \\"#connectionAttribute = :connectionAttribute\\",
  \\"expressionNames\\": {
      \\"#connectionAttribute\\": \\"mentionTargetId\\"
  },
  \\"expressionValues\\": {
      \\":connectionAttribute\\": {
          \\"S\\": \\"$context.source.id\\"
    }
  }
} )
{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"Query\\",
  \\"query\\":   $util.toJson($query),
  \\"scanIndexForward\\":   #if( $context.args.sortDirection )
    #if( $context.args.sortDirection == \\"ASC\\" )
true
    #else
false
    #end
  #else
true
  #end,
  \\"filter\\":   #if( $context.args.filter )
$util.transform.toDynamoDBFilterExpression($ctx.args.filter)
  #else
null
  #end,
  \\"limit\\": $limit,
  \\"nextToken\\":   #if( $context.args.nextToken )
\\"$context.args.nextToken\\"
  #else
null
  #end,
  \\"index\\": \\"gsi-TargetUser\\"
}",
        "ResponseMappingTemplate": "#if( !$result )
  #set( $result = $ctx.result )
#end
$util.toJson($result)",
        "TypeName": "User",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsyncMessagesDSDS7A64FC6F": Object {
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "Description": "Data source for Messages Table",
        "DynamoDBConfig": Object {
          "AwsRegion": "eu-west-2",
          "TableName": Object {
            "Fn::ImportValue": "dynamodb:ExportsOutputRefmessageTable32BEE1EEBF397A0A",
          },
        },
        "Name": "MessagesDS",
        "ServiceRoleArn": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncMessagesDSDSServiceRole7C2E231A",
            "Arn",
          ],
        },
        "Type": "AMAZON_DYNAMODB",
      },
      "Type": "AWS::AppSync::DataSource",
    },
    "onetaskundefinedappsyncMessagesDSDSActivitymessageResolver35B32D24": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncMessagesDSDS7A64FC6F",
        "onetaskundefinedappsyncSchema3C62815F",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "MessagesDS",
        "FieldName": "message",
        "Kind": "UNIT",
        "RequestMappingTemplate": "{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"GetItem\\",
  \\"key\\": {
      \\"id\\": $util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank($ctx.source.activityMessageId, \\"___xamznone____\\"))
  }
}",
        "ResponseMappingTemplate": "$util.toJson($context.result)",
        "TypeName": "Activity",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsyncMessagesDSDSMutationcreateMessageResolverBED4D96C": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncMessagesDSDS7A64FC6F",
        "onetaskundefinedappsyncSchema3C62815F",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "MessagesDS",
        "FieldName": "createMessage",
        "Kind": "UNIT",
        "RequestMappingTemplate": "## [Start] Prepare DynamoDB PutItem Request. **
$util.qr($context.args.input.put(\\"createdAt\\", $util.defaultIfNull($ctx.args.input.createdAt, $util.time.nowISO8601())))
$util.qr($context.args.input.put(\\"updatedAt\\", $util.defaultIfNull($ctx.args.input.updatedAt, $util.time.nowISO8601())))
$util.qr($context.args.input.put(\\"__typename\\", \\"Message\\"))
#set( $condition = {
  \\"expression\\": \\"attribute_not_exists(#id)\\",
  \\"expressionNames\\": {
      \\"#id\\": \\"id\\"
  }
} )
#if( $context.args.condition )
  #set( $condition.expressionValues = {} )
  #set( $conditionFilterExpressions = $util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition)) )
  $util.qr($condition.put(\\"expression\\", \\"($condition.expression) AND $conditionFilterExpressions.expression\\"))
  $util.qr($condition.expressionNames.putAll($conditionFilterExpressions.expressionNames))
  $util.qr($condition.expressionValues.putAll($conditionFilterExpressions.expressionValues))
#end
#if( $condition.expressionValues && $condition.expressionValues.size() == 0 )
  #set( $condition = {
  \\"expression\\": $condition.expression,
  \\"expressionNames\\": $condition.expressionNames
} )
#end
{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"PutItem\\",
  \\"key\\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {
  \\"id\\":   $util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank($ctx.args.input.id, $util.autoId()))
} #end,
  \\"attributeValues\\": $util.dynamodb.toMapValuesJson($context.args.input),
  \\"condition\\": $util.toJson($condition)
}
## [End] Prepare DynamoDB PutItem Request. **",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)",
        "TypeName": "Mutation",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsyncMessagesDSDSMutationdeleteMessageResolverBB384F4A": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncMessagesDSDS7A64FC6F",
        "onetaskundefinedappsyncSchema3C62815F",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "MessagesDS",
        "FieldName": "deleteMessage",
        "Kind": "UNIT",
        "RequestMappingTemplate": "#if( $authCondition )
  #set( $condition = $authCondition )
  #if( $modelObjectKey )
    #foreach( $entry in $modelObjectKey.entrySet() )
      $util.qr($condition.put(\\"expression\\", \\"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\\"))
      $util.qr($condition.expressionNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
    #end
  #else
    $util.qr($condition.put(\\"expression\\", \\"$condition.expression AND attribute_exists(#id)\\"))
    $util.qr($condition.expressionNames.put(\\"#id\\", \\"id\\"))
  #end
#else
  #if( $modelObjectKey )
    #set( $condition = {
  \\"expression\\": \\"\\",
  \\"expressionNames\\": {}
} )
    #foreach( $entry in $modelObjectKey.entrySet() )
      #if( $velocityCount == 1 )
        $util.qr($condition.put(\\"expression\\", \\"attribute_exists(#keyCondition$velocityCount)\\"))
      #else
        $util.qr($condition.put(\\"expression\\", \\"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\\"))
      #end
      $util.qr($condition.expressionNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
    #end
  #else
    #set( $condition = {
  \\"expression\\": \\"attribute_exists(#id)\\",
  \\"expressionNames\\": {
      \\"#id\\": \\"id\\"
  }
} )
  #end
#end
#if( $versionedCondition )
  $util.qr($condition.put(\\"expression\\", \\"($condition.expression) AND $versionedCondition.expression\\"))
  $util.qr($condition.expressionNames.putAll($versionedCondition.expressionNames))
  #set( $expressionValues = $util.defaultIfNull($condition.expressionValues, {}) )
  $util.qr($expressionValues.putAll($versionedCondition.expressionValues))
  #set( $condition.expressionValues = $expressionValues )
#end
#if( $context.args.condition )
  #set( $conditionFilterExpressions = $util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition)) )
  $util.qr($condition.put(\\"expression\\", \\"($condition.expression) AND $conditionFilterExpressions.expression\\"))
  $util.qr($condition.expressionNames.putAll($conditionFilterExpressions.expressionNames))
  #set( $conditionExpressionValues = $util.defaultIfNull($condition.expressionValues, {}) )
  $util.qr($conditionExpressionValues.putAll($conditionFilterExpressions.expressionValues))
  #set( $condition.expressionValues = $conditionExpressionValues )
  $util.qr($condition.expressionValues.putAll($conditionFilterExpressions.expressionValues))
#end
#if( $condition.expressionValues && $condition.expressionValues.size() == 0 )
  #set( $condition = {
  \\"expression\\": $condition.expression,
  \\"expressionNames\\": $condition.expressionNames
} )
#end
{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"DeleteItem\\",
  \\"key\\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {
  \\"id\\": $util.dynamodb.toDynamoDBJson($ctx.args.input.id)
} #end,
  \\"condition\\": $util.toJson($condition)
}",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)",
        "TypeName": "Mutation",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsyncMessagesDSDSMutationupdateMessageResolverC6523BBE": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncMessagesDSDS7A64FC6F",
        "onetaskundefinedappsyncSchema3C62815F",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "MessagesDS",
        "FieldName": "updateMessage",
        "Kind": "UNIT",
        "RequestMappingTemplate": "#if( $authCondition && $authCondition.expression != \\"\\" )
  #set( $condition = $authCondition )
  #if( $modelObjectKey )
    #foreach( $entry in $modelObjectKey.entrySet() )
      $util.qr($condition.put(\\"expression\\", \\"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\\"))
      $util.qr($condition.expressionNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
    #end
  #else
    $util.qr($condition.put(\\"expression\\", \\"$condition.expression AND attribute_exists(#id)\\"))
    $util.qr($condition.expressionNames.put(\\"#id\\", \\"id\\"))
  #end
#else
  #if( $modelObjectKey )
    #set( $condition = {
  \\"expression\\": \\"\\",
  \\"expressionNames\\": {},
  \\"expressionValues\\": {}
} )
    #foreach( $entry in $modelObjectKey.entrySet() )
      #if( $velocityCount == 1 )
        $util.qr($condition.put(\\"expression\\", \\"attribute_exists(#keyCondition$velocityCount)\\"))
      #else
        $util.qr($condition.put(\\"expression\\", \\"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\\"))
      #end
      $util.qr($condition.expressionNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
    #end
  #else
    #set( $condition = {
  \\"expression\\": \\"attribute_exists(#id)\\",
  \\"expressionNames\\": {
      \\"#id\\": \\"id\\"
  },
  \\"expressionValues\\": {}
} )
  #end
#end
## Automatically set the updatedAt timestamp. **
$util.qr($context.args.input.put(\\"updatedAt\\", $util.defaultIfNull($ctx.args.input.updatedAt, $util.time.nowISO8601())))
$util.qr($context.args.input.put(\\"__typename\\", \\"Message\\"))
## Update condition if type is @versioned **
#if( $versionedCondition )
  $util.qr($condition.put(\\"expression\\", \\"($condition.expression) AND $versionedCondition.expression\\"))
  $util.qr($condition.expressionNames.putAll($versionedCondition.expressionNames))
  $util.qr($condition.expressionValues.putAll($versionedCondition.expressionValues))
#end
#if( $context.args.condition )
  #set( $conditionFilterExpressions = $util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition)) )
  $util.qr($condition.put(\\"expression\\", \\"($condition.expression) AND $conditionFilterExpressions.expression\\"))
  $util.qr($condition.expressionNames.putAll($conditionFilterExpressions.expressionNames))
  $util.qr($condition.expressionValues.putAll($conditionFilterExpressions.expressionValues))
#end
#if( $condition.expressionValues && $condition.expressionValues.size() == 0 )
  #set( $condition = {
  \\"expression\\": $condition.expression,
  \\"expressionNames\\": $condition.expressionNames
} )
#end
#set( $expNames = {} )
#set( $expValues = {} )
#set( $expSet = {} )
#set( $expAdd = {} )
#set( $expRemove = [] )
#if( $modelObjectKey )
  #set( $keyFields = [] )
  #foreach( $entry in $modelObjectKey.entrySet() )
    $util.qr($keyFields.add(\\"$entry.key\\"))
  #end
#else
  #set( $keyFields = [\\"id\\"] )
#end
#foreach( $entry in $util.map.copyAndRemoveAllKeys($context.args.input, $keyFields).entrySet() )
  #if( !$util.isNull($dynamodbNameOverrideMap) && $dynamodbNameOverrideMap.containsKey(\\"$entry.key\\") )
    #set( $entryKeyAttributeName = $dynamodbNameOverrideMap.get(\\"$entry.key\\") )
  #else
    #set( $entryKeyAttributeName = $entry.key )
  #end
  #if( $util.isNull($entry.value) )
    #set( $discard = $expRemove.add(\\"#$entryKeyAttributeName\\") )
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
  #else
    $util.qr($expSet.put(\\"#$entryKeyAttributeName\\", \\":$entryKeyAttributeName\\"))
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
    $util.qr($expValues.put(\\":$entryKeyAttributeName\\", $util.dynamodb.toDynamoDB($entry.value)))
  #end
#end
#set( $expression = \\"\\" )
#if( !$expSet.isEmpty() )
  #set( $expression = \\"SET\\" )
  #foreach( $entry in $expSet.entrySet() )
    #set( $expression = \\"$expression $entry.key = $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expAdd.isEmpty() )
  #set( $expression = \\"$expression ADD\\" )
  #foreach( $entry in $expAdd.entrySet() )
    #set( $expression = \\"$expression $entry.key $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expRemove.isEmpty() )
  #set( $expression = \\"$expression REMOVE\\" )
  #foreach( $entry in $expRemove )
    #set( $expression = \\"$expression $entry\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#set( $update = {} )
$util.qr($update.put(\\"expression\\", \\"$expression\\"))
#if( !$expNames.isEmpty() )
  $util.qr($update.put(\\"expressionNames\\", $expNames))
#end
#if( !$expValues.isEmpty() )
  $util.qr($update.put(\\"expressionValues\\", $expValues))
#end
{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"UpdateItem\\",
  \\"key\\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {
  \\"id\\": {
      \\"S\\": \\"$context.args.input.id\\"
  }
} #end,
  \\"update\\": $util.toJson($update),
  \\"condition\\": $util.toJson($condition)
}",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)",
        "TypeName": "Mutation",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsyncMessagesDSDSQuerygetMessageResolverD6B7EAD2": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncMessagesDSDS7A64FC6F",
        "onetaskundefinedappsyncSchema3C62815F",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "MessagesDS",
        "FieldName": "getMessage",
        "Kind": "UNIT",
        "RequestMappingTemplate": "{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"GetItem\\",
  \\"key\\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {
  \\"id\\": $util.dynamodb.toDynamoDBJson($ctx.args.id)
} #end
}",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)",
        "TypeName": "Query",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsyncMessagesDSDSQuerylistMessagesResolverEB8A28E1": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncMessagesDSDS7A64FC6F",
        "onetaskundefinedappsyncSchema3C62815F",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "MessagesDS",
        "FieldName": "listMessages",
        "Kind": "UNIT",
        "RequestMappingTemplate": "#set( $limit = $util.defaultIfNull($context.args.limit, 10) )
#set( $ListRequest = {
  \\"version\\": \\"2017-02-28\\",
  \\"limit\\": $limit
} )
#if( $context.args.nextToken )
  #set( $ListRequest.nextToken = \\"$context.args.nextToken\\" )
#end
#if( $context.args.filter )
  #set( $ListRequest.filter = $util.parseJson(\\"$util.transform.toDynamoDBFilterExpression($ctx.args.filter)\\") )
#end
#if( !$util.isNull($modelQueryExpression)
                        && !$util.isNullOrEmpty($modelQueryExpression.expression) )
  $util.qr($ListRequest.put(\\"operation\\", \\"Query\\"))
  $util.qr($ListRequest.put(\\"query\\", $modelQueryExpression))
  #if( !$util.isNull($ctx.args.sortDirection) && $ctx.args.sortDirection == \\"DESC\\" )
    #set( $ListRequest.scanIndexForward = false )
  #else
    #set( $ListRequest.scanIndexForward = true )
  #end
#else
  $util.qr($ListRequest.put(\\"operation\\", \\"Scan\\"))
#end
$util.toJson($ListRequest)",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)",
        "TypeName": "Query",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsyncMessagesDSDSServiceRole7C2E231A": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "appsync.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "onetaskundefinedappsyncMessagesDSDSServiceRoleDefaultPolicy94CAF32A": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::ImportValue": "dynamodb:ExportsOutputFnGetAttmessageTable32BEE1EEArnEF32D4EB",
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::ImportValue": "dynamodb:ExportsOutputFnGetAttmessageTable32BEE1EEArnEF32D4EB",
                      },
                      "/index/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "onetaskundefinedappsyncMessagesDSDSServiceRoleDefaultPolicy94CAF32A",
        "Roles": Array [
          Object {
            "Ref": "onetaskundefinedappsyncMessagesDSDSServiceRole7C2E231A",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "onetaskundefinedappsyncMessagesDSDSTopicmessagesResolver5FC9BE00": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncMessagesDSDS7A64FC6F",
        "onetaskundefinedappsyncSchema3C62815F",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "MessagesDS",
        "FieldName": "messages",
        "Kind": "UNIT",
        "RequestMappingTemplate": "#set( $limit = $util.defaultIfNull($context.args.limit, 10) )
#set( $query = {
  \\"expression\\": \\"#connectionAttribute = :connectionAttribute\\",
  \\"expressionNames\\": {
      \\"#connectionAttribute\\": \\"messageTopicId\\"
  },
  \\"expressionValues\\": {
      \\":connectionAttribute\\": {
          \\"S\\": \\"$context.source.id\\"
    }
  }
} )
{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"Query\\",
  \\"query\\":   $util.toJson($query),
  \\"scanIndexForward\\":   #if( $context.args.sortDirection )
    #if( $context.args.sortDirection == \\"ASC\\" )
true
    #else
false
    #end
  #else
true
  #end,
  \\"filter\\":   #if( $context.args.filter )
$util.transform.toDynamoDBFilterExpression($ctx.args.filter)
  #else
null
  #end,
  \\"limit\\": $limit,
  \\"nextToken\\":   #if( $context.args.nextToken )
\\"$context.args.nextToken\\"
  #else
null
  #end,
  \\"index\\": \\"gsi-TopicMessages\\"
}",
        "ResponseMappingTemplate": "#if( !$result )
  #set( $result = $ctx.result )
#end
$util.toJson($result)",
        "TypeName": "Topic",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsyncNotificiationsDSDS8B1D4C54": Object {
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "Description": "Data source for Notifications Table",
        "DynamoDBConfig": Object {
          "AwsRegion": "eu-west-2",
          "TableName": Object {
            "Fn::ImportValue": "dynamodb:ExportsOutputRefnotificationsTable46D4DEC4AD250B31",
          },
        },
        "Name": "NotificiationsDS",
        "ServiceRoleArn": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncNotificiationsDSDSServiceRole8A865E8A",
            "Arn",
          ],
        },
        "Type": "AMAZON_DYNAMODB",
      },
      "Type": "AWS::AppSync::DataSource",
    },
    "onetaskundefinedappsyncNotificiationsDSDSActivitynotificationsResolver1E8A1926": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncNotificiationsDSDS8B1D4C54",
        "onetaskundefinedappsyncSchema3C62815F",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "NotificiationsDS",
        "FieldName": "notifications",
        "Kind": "UNIT",
        "RequestMappingTemplate": "#set( $limit = $util.defaultIfNull($context.args.limit, 10) )
#set( $query = {
  \\"expression\\": \\"#connectionAttribute = :connectionAttribute\\",
  \\"expressionNames\\": {
      \\"#connectionAttribute\\": \\"notificationActivityId\\"
  },
  \\"expressionValues\\": {
      \\":connectionAttribute\\": {
          \\"S\\": \\"$context.source.id\\"
    }
  }
} )
{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"Query\\",
  \\"query\\":   $util.toJson($query),
  \\"scanIndexForward\\":   #if( $context.args.sortDirection )
    #if( $context.args.sortDirection == \\"ASC\\" )
true
    #else
false
    #end
  #else
true
  #end,
  \\"filter\\":   #if( $context.args.filter )
$util.transform.toDynamoDBFilterExpression($ctx.args.filter)
  #else
null
  #end,
  \\"limit\\": $limit,
  \\"nextToken\\":   #if( $context.args.nextToken )
\\"$context.args.nextToken\\"
  #else
null
  #end,
  \\"index\\": \\"gsi-NotificationActivity\\"
}",
        "ResponseMappingTemplate": "#if( !$result )
  #set( $result = $ctx.result )
#end
$util.toJson($result)",
        "TypeName": "Activity",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsyncNotificiationsDSDSMutationcreateNotificationResolver17E2C622": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncNotificiationsDSDS8B1D4C54",
        "onetaskundefinedappsyncSchema3C62815F",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "NotificiationsDS",
        "FieldName": "createNotification",
        "Kind": "UNIT",
        "RequestMappingTemplate": "## [Start] Prepare DynamoDB PutItem Request. **
$util.qr($context.args.input.put(\\"createdAt\\", $util.defaultIfNull($ctx.args.input.createdAt, $util.time.nowISO8601())))
$util.qr($context.args.input.put(\\"updatedAt\\", $util.defaultIfNull($ctx.args.input.updatedAt, $util.time.nowISO8601())))
$util.qr($context.args.input.put(\\"__typename\\", \\"Notification\\"))
#set( $condition = {
  \\"expression\\": \\"attribute_not_exists(#id)\\",
  \\"expressionNames\\": {
      \\"#id\\": \\"id\\"
  }
} )
#if( $context.args.condition )
  #set( $condition.expressionValues = {} )
  #set( $conditionFilterExpressions = $util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition)) )
  $util.qr($condition.put(\\"expression\\", \\"($condition.expression) AND $conditionFilterExpressions.expression\\"))
  $util.qr($condition.expressionNames.putAll($conditionFilterExpressions.expressionNames))
  $util.qr($condition.expressionValues.putAll($conditionFilterExpressions.expressionValues))
#end
#if( $condition.expressionValues && $condition.expressionValues.size() == 0 )
  #set( $condition = {
  \\"expression\\": $condition.expression,
  \\"expressionNames\\": $condition.expressionNames
} )
#end
{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"PutItem\\",
  \\"key\\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {
  \\"id\\":   $util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank($ctx.args.input.id, $util.autoId()))
} #end,
  \\"attributeValues\\": $util.dynamodb.toMapValuesJson($context.args.input),
  \\"condition\\": $util.toJson($condition)
}
## [End] Prepare DynamoDB PutItem Request. **",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)",
        "TypeName": "Mutation",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsyncNotificiationsDSDSMutationdeleteNotificationResolver939B8238": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncNotificiationsDSDS8B1D4C54",
        "onetaskundefinedappsyncSchema3C62815F",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "NotificiationsDS",
        "FieldName": "deleteNotification",
        "Kind": "UNIT",
        "RequestMappingTemplate": "#if( $authCondition )
  #set( $condition = $authCondition )
  #if( $modelObjectKey )
    #foreach( $entry in $modelObjectKey.entrySet() )
      $util.qr($condition.put(\\"expression\\", \\"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\\"))
      $util.qr($condition.expressionNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
    #end
  #else
    $util.qr($condition.put(\\"expression\\", \\"$condition.expression AND attribute_exists(#id)\\"))
    $util.qr($condition.expressionNames.put(\\"#id\\", \\"id\\"))
  #end
#else
  #if( $modelObjectKey )
    #set( $condition = {
  \\"expression\\": \\"\\",
  \\"expressionNames\\": {}
} )
    #foreach( $entry in $modelObjectKey.entrySet() )
      #if( $velocityCount == 1 )
        $util.qr($condition.put(\\"expression\\", \\"attribute_exists(#keyCondition$velocityCount)\\"))
      #else
        $util.qr($condition.put(\\"expression\\", \\"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\\"))
      #end
      $util.qr($condition.expressionNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
    #end
  #else
    #set( $condition = {
  \\"expression\\": \\"attribute_exists(#id)\\",
  \\"expressionNames\\": {
      \\"#id\\": \\"id\\"
  }
} )
  #end
#end
#if( $versionedCondition )
  $util.qr($condition.put(\\"expression\\", \\"($condition.expression) AND $versionedCondition.expression\\"))
  $util.qr($condition.expressionNames.putAll($versionedCondition.expressionNames))
  #set( $expressionValues = $util.defaultIfNull($condition.expressionValues, {}) )
  $util.qr($expressionValues.putAll($versionedCondition.expressionValues))
  #set( $condition.expressionValues = $expressionValues )
#end
#if( $context.args.condition )
  #set( $conditionFilterExpressions = $util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition)) )
  $util.qr($condition.put(\\"expression\\", \\"($condition.expression) AND $conditionFilterExpressions.expression\\"))
  $util.qr($condition.expressionNames.putAll($conditionFilterExpressions.expressionNames))
  #set( $conditionExpressionValues = $util.defaultIfNull($condition.expressionValues, {}) )
  $util.qr($conditionExpressionValues.putAll($conditionFilterExpressions.expressionValues))
  #set( $condition.expressionValues = $conditionExpressionValues )
  $util.qr($condition.expressionValues.putAll($conditionFilterExpressions.expressionValues))
#end
#if( $condition.expressionValues && $condition.expressionValues.size() == 0 )
  #set( $condition = {
  \\"expression\\": $condition.expression,
  \\"expressionNames\\": $condition.expressionNames
} )
#end
{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"DeleteItem\\",
  \\"key\\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {
  \\"id\\": $util.dynamodb.toDynamoDBJson($ctx.args.input.id)
} #end,
  \\"condition\\": $util.toJson($condition)
}",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)",
        "TypeName": "Mutation",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsyncNotificiationsDSDSMutationupdateNotificationResolver9D8A6777": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncNotificiationsDSDS8B1D4C54",
        "onetaskundefinedappsyncSchema3C62815F",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "NotificiationsDS",
        "FieldName": "updateNotification",
        "Kind": "UNIT",
        "RequestMappingTemplate": "#if( $authCondition && $authCondition.expression != \\"\\" )
  #set( $condition = $authCondition )
  #if( $modelObjectKey )
    #foreach( $entry in $modelObjectKey.entrySet() )
      $util.qr($condition.put(\\"expression\\", \\"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\\"))
      $util.qr($condition.expressionNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
    #end
  #else
    $util.qr($condition.put(\\"expression\\", \\"$condition.expression AND attribute_exists(#id)\\"))
    $util.qr($condition.expressionNames.put(\\"#id\\", \\"id\\"))
  #end
#else
  #if( $modelObjectKey )
    #set( $condition = {
  \\"expression\\": \\"\\",
  \\"expressionNames\\": {},
  \\"expressionValues\\": {}
} )
    #foreach( $entry in $modelObjectKey.entrySet() )
      #if( $velocityCount == 1 )
        $util.qr($condition.put(\\"expression\\", \\"attribute_exists(#keyCondition$velocityCount)\\"))
      #else
        $util.qr($condition.put(\\"expression\\", \\"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\\"))
      #end
      $util.qr($condition.expressionNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
    #end
  #else
    #set( $condition = {
  \\"expression\\": \\"attribute_exists(#id)\\",
  \\"expressionNames\\": {
      \\"#id\\": \\"id\\"
  },
  \\"expressionValues\\": {}
} )
  #end
#end
## Automatically set the updatedAt timestamp. **
$util.qr($context.args.input.put(\\"updatedAt\\", $util.defaultIfNull($ctx.args.input.updatedAt, $util.time.nowISO8601())))
$util.qr($context.args.input.put(\\"__typename\\", \\"Notification\\"))
## Update condition if type is @versioned **
#if( $versionedCondition )
  $util.qr($condition.put(\\"expression\\", \\"($condition.expression) AND $versionedCondition.expression\\"))
  $util.qr($condition.expressionNames.putAll($versionedCondition.expressionNames))
  $util.qr($condition.expressionValues.putAll($versionedCondition.expressionValues))
#end
#if( $context.args.condition )
  #set( $conditionFilterExpressions = $util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition)) )
  $util.qr($condition.put(\\"expression\\", \\"($condition.expression) AND $conditionFilterExpressions.expression\\"))
  $util.qr($condition.expressionNames.putAll($conditionFilterExpressions.expressionNames))
  $util.qr($condition.expressionValues.putAll($conditionFilterExpressions.expressionValues))
#end
#if( $condition.expressionValues && $condition.expressionValues.size() == 0 )
  #set( $condition = {
  \\"expression\\": $condition.expression,
  \\"expressionNames\\": $condition.expressionNames
} )
#end
#set( $expNames = {} )
#set( $expValues = {} )
#set( $expSet = {} )
#set( $expAdd = {} )
#set( $expRemove = [] )
#if( $modelObjectKey )
  #set( $keyFields = [] )
  #foreach( $entry in $modelObjectKey.entrySet() )
    $util.qr($keyFields.add(\\"$entry.key\\"))
  #end
#else
  #set( $keyFields = [\\"id\\"] )
#end
#foreach( $entry in $util.map.copyAndRemoveAllKeys($context.args.input, $keyFields).entrySet() )
  #if( !$util.isNull($dynamodbNameOverrideMap) && $dynamodbNameOverrideMap.containsKey(\\"$entry.key\\") )
    #set( $entryKeyAttributeName = $dynamodbNameOverrideMap.get(\\"$entry.key\\") )
  #else
    #set( $entryKeyAttributeName = $entry.key )
  #end
  #if( $util.isNull($entry.value) )
    #set( $discard = $expRemove.add(\\"#$entryKeyAttributeName\\") )
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
  #else
    $util.qr($expSet.put(\\"#$entryKeyAttributeName\\", \\":$entryKeyAttributeName\\"))
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
    $util.qr($expValues.put(\\":$entryKeyAttributeName\\", $util.dynamodb.toDynamoDB($entry.value)))
  #end
#end
#set( $expression = \\"\\" )
#if( !$expSet.isEmpty() )
  #set( $expression = \\"SET\\" )
  #foreach( $entry in $expSet.entrySet() )
    #set( $expression = \\"$expression $entry.key = $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expAdd.isEmpty() )
  #set( $expression = \\"$expression ADD\\" )
  #foreach( $entry in $expAdd.entrySet() )
    #set( $expression = \\"$expression $entry.key $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expRemove.isEmpty() )
  #set( $expression = \\"$expression REMOVE\\" )
  #foreach( $entry in $expRemove )
    #set( $expression = \\"$expression $entry\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#set( $update = {} )
$util.qr($update.put(\\"expression\\", \\"$expression\\"))
#if( !$expNames.isEmpty() )
  $util.qr($update.put(\\"expressionNames\\", $expNames))
#end
#if( !$expValues.isEmpty() )
  $util.qr($update.put(\\"expressionValues\\", $expValues))
#end
{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"UpdateItem\\",
  \\"key\\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {
  \\"id\\": {
      \\"S\\": \\"$context.args.input.id\\"
  }
} #end,
  \\"update\\": $util.toJson($update),
  \\"condition\\": $util.toJson($condition)
}",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)",
        "TypeName": "Mutation",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsyncNotificiationsDSDSQuerygetNotificationResolverD6D3C9ED": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncNotificiationsDSDS8B1D4C54",
        "onetaskundefinedappsyncSchema3C62815F",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "NotificiationsDS",
        "FieldName": "getNotification",
        "Kind": "UNIT",
        "RequestMappingTemplate": "{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"GetItem\\",
  \\"key\\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {
  \\"id\\": $util.dynamodb.toDynamoDBJson($ctx.args.id)
} #end
}",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)",
        "TypeName": "Query",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsyncNotificiationsDSDSQuerylistNotificationsResolverD028A3C1": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncNotificiationsDSDS8B1D4C54",
        "onetaskundefinedappsyncSchema3C62815F",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "NotificiationsDS",
        "FieldName": "listNotifications",
        "Kind": "UNIT",
        "RequestMappingTemplate": "#set( $limit = $util.defaultIfNull($context.args.limit, 10) )
#set( $ListRequest = {
  \\"version\\": \\"2017-02-28\\",
  \\"limit\\": $limit
} )
#if( $context.args.nextToken )
  #set( $ListRequest.nextToken = \\"$context.args.nextToken\\" )
#end
#if( $context.args.filter )
  #set( $ListRequest.filter = $util.parseJson(\\"$util.transform.toDynamoDBFilterExpression($ctx.args.filter)\\") )
#end
#if( !$util.isNull($modelQueryExpression)
                        && !$util.isNullOrEmpty($modelQueryExpression.expression) )
  $util.qr($ListRequest.put(\\"operation\\", \\"Query\\"))
  $util.qr($ListRequest.put(\\"query\\", $modelQueryExpression))
  #if( !$util.isNull($ctx.args.sortDirection) && $ctx.args.sortDirection == \\"DESC\\" )
    #set( $ListRequest.scanIndexForward = false )
  #else
    #set( $ListRequest.scanIndexForward = true )
  #end
#else
  $util.qr($ListRequest.put(\\"operation\\", \\"Scan\\"))
#end
$util.toJson($ListRequest)",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)",
        "TypeName": "Query",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsyncNotificiationsDSDSServiceRole8A865E8A": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "appsync.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "onetaskundefinedappsyncNotificiationsDSDSServiceRoleDefaultPolicy666354F7": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::ImportValue": "dynamodb:ExportsOutputFnGetAttnotificationsTable46D4DEC4ArnEE594BD5",
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::ImportValue": "dynamodb:ExportsOutputFnGetAttnotificationsTable46D4DEC4ArnEE594BD5",
                      },
                      "/index/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "onetaskundefinedappsyncNotificiationsDSDSServiceRoleDefaultPolicy666354F7",
        "Roles": Array [
          Object {
            "Ref": "onetaskundefinedappsyncNotificiationsDSDSServiceRole8A865E8A",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "onetaskundefinedappsyncNotificiationsDSDSUsernotificationsResolver993E0FB4": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncNotificiationsDSDS8B1D4C54",
        "onetaskundefinedappsyncSchema3C62815F",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "NotificiationsDS",
        "FieldName": "notifications",
        "Kind": "UNIT",
        "RequestMappingTemplate": "#set( $limit = $util.defaultIfNull($context.args.limit, 10) )
#set( $query = {
  \\"expression\\": \\"#connectionAttribute = :connectionAttribute\\",
  \\"expressionNames\\": {
      \\"#connectionAttribute\\": \\"notificationUserId\\"
  },
  \\"expressionValues\\": {
      \\":connectionAttribute\\": {
          \\"S\\": \\"$context.source.id\\"
    }
  }
} )
{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"Query\\",
  \\"query\\":   $util.toJson($query),
  \\"scanIndexForward\\":   #if( $context.args.sortDirection )
    #if( $context.args.sortDirection == \\"ASC\\" )
true
    #else
false
    #end
  #else
true
  #end,
  \\"filter\\":   #if( $context.args.filter )
$util.transform.toDynamoDBFilterExpression($ctx.args.filter)
  #else
null
  #end,
  \\"limit\\": $limit,
  \\"nextToken\\":   #if( $context.args.nextToken )
\\"$context.args.nextToken\\"
  #else
null
  #end,
  \\"index\\": \\"gsi-UserNotifications\\"
}",
        "ResponseMappingTemplate": "#if( !$result )
  #set( $result = $ctx.result )
#end
$util.toJson($result)",
        "TypeName": "User",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsyncSchema3C62815F": Object {
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "Definition": "type Mutation {
  deleteValidTopicMember(input: DeleteInput!): TopicMember
  deleteTopic(input: DeleteTopicInput!, condition: ModelTopicConditionInput): Topic
  createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User @aws_api_key @aws_cognito_user_pools
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User @aws_api_key @aws_cognito_user_pools
  deleteUser(input: DeleteUserInput!, condition: ModelUserConditionInput): User @aws_api_key @aws_cognito_user_pools
  createTopic(input: CreateTopicInput!, condition: ModelTopicConditionInput): Topic @aws_api_key @aws_cognito_user_pools
  updateTopic(input: UpdateTopicInput!, condition: ModelTopicConditionInput): Topic @aws_api_key @aws_cognito_user_pools
  createTopicMember(input: CreateTopicMemberInput!, condition: ModelTopicMemberConditionInput): TopicMember @aws_api_key @aws_cognito_user_pools
  updateTopicMember(input: UpdateTopicMemberInput!, condition: ModelTopicMemberConditionInput): TopicMember @aws_api_key @aws_cognito_user_pools
  createMention(input: CreateMentionInput!, condition: ModelMentionConditionInput): Mention @aws_api_key @aws_cognito_user_pools
  updateMention(input: UpdateMentionInput!, condition: ModelMentionConditionInput): Mention @aws_api_key @aws_cognito_user_pools
  deleteMention(input: DeleteMentionInput!, condition: ModelMentionConditionInput): Mention @aws_api_key @aws_cognito_user_pools
  createMessage(input: CreateMessageInput!, condition: ModelMessageConditionInput): Message @aws_api_key @aws_cognito_user_pools
  updateMessage(input: UpdateMessageInput!, condition: ModelMessageConditionInput): Message @aws_api_key @aws_cognito_user_pools
  deleteMessage(input: DeleteMessageInput!, condition: ModelMessageConditionInput): Message @aws_api_key @aws_cognito_user_pools
  createActivity(input: CreateActivityInput!, condition: ModelActivityConditionInput): Activity @aws_api_key @aws_cognito_user_pools
  updateActivity(input: UpdateActivityInput!, condition: ModelActivityConditionInput): Activity @aws_api_key @aws_cognito_user_pools
  deleteActivity(input: DeleteActivityInput!, condition: ModelActivityConditionInput): Activity @aws_api_key @aws_cognito_user_pools
  createNotification(input: CreateNotificationInput!, condition: ModelNotificationConditionInput): Notification @aws_api_key @aws_cognito_user_pools
  updateNotification(input: UpdateNotificationInput!, condition: ModelNotificationConditionInput): Notification @aws_api_key @aws_cognito_user_pools
  deleteNotification(input: DeleteNotificationInput!, condition: ModelNotificationConditionInput): Notification @aws_api_key @aws_cognito_user_pools
}

type Query {
  search(input: SearchInput!): [SearchResult] @aws_cognito_user_pools
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection @aws_api_key @aws_cognito_user_pools
  getUser(id: ID!): User @aws_api_key @aws_cognito_user_pools
  listTopics(filter: ModelTopicFilterInput, limit: Int, nextToken: String): ModelTopicConnection @aws_api_key @aws_cognito_user_pools
  getTopic(id: ID!): Topic @aws_api_key @aws_cognito_user_pools
  ListOfTopicsinAlphabeticalOrder(keyField: String, title: ModelStringKeyConditionInput, sortDirection: ModelSortDirection, filter: ModelTopicFilterInput, limit: Int, nextToken: String): ModelTopicConnection @aws_cognito_user_pools @aws_api_key
  listTopicMembers(filter: ModelTopicMemberFilterInput, limit: Int, nextToken: String): ModelTopicMemberConnection @aws_api_key @aws_cognito_user_pools
  getTopicMember(id: ID!): TopicMember @aws_api_key @aws_cognito_user_pools
  listMentions(filter: ModelMentionFilterInput, limit: Int, nextToken: String): ModelMentionConnection @aws_api_key @aws_cognito_user_pools
  getMention(id: ID!): Mention @aws_api_key @aws_cognito_user_pools
  listMessages(filter: ModelMessageFilterInput, limit: Int, nextToken: String): ModelMessageConnection @aws_api_key @aws_cognito_user_pools
  getMessage(id: ID!): Message @aws_api_key @aws_cognito_user_pools
  listActivitys(filter: ModelActivityFilterInput, limit: Int, nextToken: String): ModelActivityConnection @aws_api_key @aws_cognito_user_pools
  getActivity(id: ID!): Activity @aws_api_key @aws_cognito_user_pools
  getNotification(id: ID!): Notification @aws_api_key @aws_cognito_user_pools
  listNotifications(filter: ModelNotificationFilterInput, limit: Int, nextToken: String): ModelNotificationConnection @aws_api_key @aws_cognito_user_pools
}

type SearchResult {
  type: SearchResultType! @aws_cognito_user_pools
  Topic: Topic @aws_cognito_user_pools
  Message: Message @aws_cognito_user_pools
  Activity: Activity @aws_cognito_user_pools
  Notification: Notification @aws_cognito_user_pools
  Mention: Mention @aws_cognito_user_pools
  User: User @aws_cognito_user_pools
}

input SearchInput {
  type: [TopicType]
  topicId: [ID]
  ownerId: [ID]
  query: String
  nextToken: String
}

type UserProfile {
  email: String! @aws_cognito_user_pools
  name: String! @aws_cognito_user_pools
}

type Attachment {
  url: String! @aws_cognito_user_pools
  type: AttachmentType! @aws_cognito_user_pools
  description: String @aws_cognito_user_pools
}

input DeleteInput {
  id: ID
}

enum TopicType {
  TEAM
  PROJECT
  HQ
  MESSAGE_BOARD
  TASK
  TASK_LIST
}

enum AccessType {
  DELEGATE
  ASSIGNEE
  FOLLOWER
  MEMBER
}

enum SearchResultType {
  Topic
  Message
  Activity
  Notification
  Mention
  User
}

enum AttachmentType {
  AUDIO
  VIDEO
  IMAGE
  FILE
}

type User @aws_cognito_user_pools @aws_api_key {
  id: ID!
  profile: UserProfile!
  lastAccessedAt: AWSDateTime
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  topics(filter: ModelTopicFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelTopicConnection @aws_cognito_user_pools @aws_api_key
  memberships(filter: ModelTopicMemberFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelTopicMemberConnection @aws_cognito_user_pools @aws_api_key
  mentions(filter: ModelMentionFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelMentionConnection @aws_cognito_user_pools @aws_api_key
  targets(filter: ModelMentionFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelMentionConnection @aws_cognito_user_pools @aws_api_key
  messages(filter: ModelMessageFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelMessageConnection @aws_cognito_user_pools @aws_api_key
  activity(filter: ModelActivityFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelActivityConnection @aws_cognito_user_pools @aws_api_key
  notifications(filter: ModelNotificationFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelNotificationConnection @aws_cognito_user_pools @aws_api_key
}

type Topic @aws_cognito_user_pools @aws_api_key {
  id: ID!
  title: String!
  description: String
  isDeleted: Boolean
  isRoot: Boolean
  type: TopicType!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  startedAt: AWSDateTime
  endedAt: AWSDateTime
  keyField: String
  owner: User @aws_cognito_user_pools @aws_api_key
  parent: Topic @aws_cognito_user_pools @aws_api_key
  children(filter: ModelTopicFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelTopicConnection @aws_cognito_user_pools @aws_api_key
  root: Topic @aws_cognito_user_pools @aws_api_key
  nodes(filter: ModelTopicFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelTopicConnection @aws_cognito_user_pools @aws_api_key
  members(filter: ModelTopicMemberFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelTopicMemberConnection @aws_cognito_user_pools @aws_api_key
  mentions(filter: ModelMentionFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelMentionConnection @aws_cognito_user_pools @aws_api_key
  messages(filter: ModelMessageFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelMessageConnection @aws_cognito_user_pools @aws_api_key
  activity(filter: ModelActivityFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelActivityConnection @aws_cognito_user_pools @aws_api_key
}

type TopicMember @aws_cognito_user_pools @aws_api_key {
  id: ID!
  access: AccessType!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  user: User! @aws_cognito_user_pools @aws_api_key
  topic: Topic! @aws_cognito_user_pools @aws_api_key
  activity(filter: ModelActivityFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelActivityConnection @aws_cognito_user_pools @aws_api_key
}

type Mention @aws_cognito_user_pools @aws_api_key {
  id: ID!
  root: Topic!
  message: Message!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  owner: User @aws_cognito_user_pools @aws_api_key
  target: User @aws_cognito_user_pools @aws_api_key
  topic: Topic! @aws_cognito_user_pools @aws_api_key
  activity(filter: ModelActivityFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelActivityConnection @aws_cognito_user_pools @aws_api_key
}

type Message @aws_cognito_user_pools @aws_api_key {
  id: ID!
  text: String!
  attachment: Attachment
  topicRootId: ID!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  owner: User @aws_cognito_user_pools @aws_api_key
  topic: Topic! @aws_cognito_user_pools @aws_api_key
  activity(filter: ModelActivityFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelActivityConnection @aws_cognito_user_pools @aws_api_key
}

type Activity @aws_cognito_user_pools @aws_api_key {
  id: ID!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  user: User @aws_cognito_user_pools @aws_api_key
  topic: Topic @aws_cognito_user_pools @aws_api_key
  member: TopicMember @aws_cognito_user_pools @aws_api_key
  mention: Mention @aws_cognito_user_pools @aws_api_key
  message: Message @aws_cognito_user_pools @aws_api_key
  notifications(filter: ModelNotificationFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelNotificationConnection @aws_cognito_user_pools @aws_api_key
}

type Notification @aws_cognito_user_pools @aws_api_key {
  id: ID!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  user: User @aws_cognito_user_pools @aws_api_key
  activity: Activity @aws_cognito_user_pools @aws_api_key
}

input UserProfileInput {
  email: String!
  name: String!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelUserConnection @aws_api_key @aws_cognito_user_pools {
  items: [User]
  nextToken: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelUserFilterInput {
  id: ModelIDInput
  lastAccessedAt: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

input CreateUserInput {
  id: ID
  profile: UserProfileInput!
  lastAccessedAt: AWSDateTime
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

input UpdateUserInput {
  id: ID!
  profile: UserProfileInput
  lastAccessedAt: AWSDateTime
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

input DeleteUserInput {
  id: ID
}

input ModelUserConditionInput {
  lastAccessedAt: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Subscription {
  onDeleteTopic: Topic @aws_subscribe(mutations: [\\"deleteTopic\\"])
  onCreateUser: User @aws_subscribe(mutations: [\\"createUser\\"]) @aws_api_key @aws_cognito_user_pools
  onUpdateUser: User @aws_subscribe(mutations: [\\"updateUser\\"]) @aws_api_key @aws_cognito_user_pools
  onDeleteUser: User @aws_subscribe(mutations: [\\"deleteUser\\"]) @aws_api_key @aws_cognito_user_pools
  onCreateTopic(topicOwnerId: String!): Topic @aws_subscribe(mutations: [\\"createTopic\\"]) @aws_api_key @aws_cognito_user_pools
  onUpdateTopic(topicOwnerId: String!): Topic @aws_subscribe(mutations: [\\"updateTopic\\"]) @aws_api_key @aws_cognito_user_pools
  onCreateTopicMember: TopicMember @aws_subscribe(mutations: [\\"createTopicMember\\"]) @aws_api_key @aws_cognito_user_pools
  onUpdateTopicMember: TopicMember @aws_subscribe(mutations: [\\"updateTopicMember\\"]) @aws_api_key @aws_cognito_user_pools
  onCreateMention: Mention @aws_subscribe(mutations: [\\"createMention\\"]) @aws_api_key @aws_cognito_user_pools
  onUpdateMention: Mention @aws_subscribe(mutations: [\\"updateMention\\"]) @aws_api_key @aws_cognito_user_pools
  onDeleteMention: Mention @aws_subscribe(mutations: [\\"deleteMention\\"]) @aws_api_key @aws_cognito_user_pools
  onCreateMessage: Message @aws_subscribe(mutations: [\\"createMessage\\"]) @aws_api_key @aws_cognito_user_pools
  onUpdateMessage: Message @aws_subscribe(mutations: [\\"updateMessage\\"]) @aws_api_key @aws_cognito_user_pools
  onDeleteMessage: Message @aws_subscribe(mutations: [\\"deleteMessage\\"]) @aws_api_key @aws_cognito_user_pools
  onCreateActivity: Activity @aws_subscribe(mutations: [\\"createActivity\\"]) @aws_api_key @aws_cognito_user_pools
  onUpdateActivity: Activity @aws_subscribe(mutations: [\\"updateActivity\\"]) @aws_api_key @aws_cognito_user_pools
  onDeleteActivity: Activity @aws_subscribe(mutations: [\\"deleteActivity\\"]) @aws_api_key @aws_cognito_user_pools
  onCreateNotification: Notification @aws_subscribe(mutations: [\\"createNotification\\"]) @aws_api_key @aws_cognito_user_pools
  onUpdateNotification: Notification @aws_subscribe(mutations: [\\"updateNotification\\"]) @aws_api_key @aws_cognito_user_pools
  onDeleteNotification: Notification @aws_subscribe(mutations: [\\"deleteNotification\\"]) @aws_api_key @aws_cognito_user_pools
}

type ModelTopicConnection @aws_api_key @aws_cognito_user_pools {
  items: [Topic]
  nextToken: String
}

input ModelTopicTypeInput {
  eq: TopicType
  ne: TopicType
}

input ModelTopicFilterInput {
  id: ModelIDInput
  title: ModelStringInput
  description: ModelStringInput
  isDeleted: ModelBooleanInput
  isRoot: ModelBooleanInput
  type: ModelTopicTypeInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  startedAt: ModelStringInput
  endedAt: ModelStringInput
  keyField: ModelStringInput
  and: [ModelTopicFilterInput]
  or: [ModelTopicFilterInput]
  not: ModelTopicFilterInput
}

input CreateTopicInput {
  id: ID
  title: String!
  description: String
  isDeleted: Boolean
  isRoot: Boolean
  type: TopicType!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  startedAt: AWSDateTime
  endedAt: AWSDateTime
  keyField: String
  topicOwnerId: ID
  topicParentId: ID
  topicRootId: ID
}

input UpdateTopicInput {
  id: ID!
  title: String
  description: String
  isDeleted: Boolean
  isRoot: Boolean
  type: TopicType
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  startedAt: AWSDateTime
  endedAt: AWSDateTime
  keyField: String
  topicOwnerId: ID
  topicParentId: ID
  topicRootId: ID
}

input DeleteTopicInput {
  id: ID
}

input ModelTopicConditionInput {
  title: ModelStringInput
  description: ModelStringInput
  isDeleted: ModelBooleanInput
  isRoot: ModelBooleanInput
  type: ModelTopicTypeInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  startedAt: ModelStringInput
  endedAt: ModelStringInput
  keyField: ModelStringInput
  and: [ModelTopicConditionInput]
  or: [ModelTopicConditionInput]
  not: ModelTopicConditionInput
}

type ModelTopicMemberConnection @aws_api_key @aws_cognito_user_pools {
  items: [TopicMember]
  nextToken: String
}

input ModelAccessTypeInput {
  eq: AccessType
  ne: AccessType
}

input ModelTopicMemberFilterInput {
  id: ModelIDInput
  access: ModelAccessTypeInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelTopicMemberFilterInput]
  or: [ModelTopicMemberFilterInput]
  not: ModelTopicMemberFilterInput
}

input CreateTopicMemberInput {
  id: ID
  access: AccessType!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  topicMemberUserId: ID!
  topicMemberTopicId: ID!
}

input UpdateTopicMemberInput {
  id: ID!
  access: AccessType
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  topicMemberUserId: ID
  topicMemberTopicId: ID
}

input ModelTopicMemberConditionInput {
  access: ModelAccessTypeInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelTopicMemberConditionInput]
  or: [ModelTopicMemberConditionInput]
  not: ModelTopicMemberConditionInput
}

type ModelMentionConnection @aws_api_key @aws_cognito_user_pools {
  items: [Mention]
  nextToken: String
}

input ModelMentionFilterInput {
  id: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelMentionFilterInput]
  or: [ModelMentionFilterInput]
  not: ModelMentionFilterInput
}

input CreateMentionInput {
  id: ID
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  mentionTopicId: ID!
  mentionOwnerId: ID
  mentionTargetId: ID
}

input UpdateMentionInput {
  id: ID!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  mentionTopicId: ID
  mentionOwnerId: ID
  mentionTargetId: ID
}

input DeleteMentionInput {
  id: ID
}

input ModelMentionConditionInput {
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelMentionConditionInput]
  or: [ModelMentionConditionInput]
  not: ModelMentionConditionInput
}

input AttachmentInput {
  url: String!
  type: AttachmentType!
  description: String
}

type ModelMessageConnection @aws_api_key @aws_cognito_user_pools {
  items: [Message]
  nextToken: String
}

input ModelMessageFilterInput {
  id: ModelIDInput
  text: ModelStringInput
  topicRootId: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelMessageFilterInput]
  or: [ModelMessageFilterInput]
  not: ModelMessageFilterInput
}

input CreateMessageInput {
  id: ID
  text: String!
  attachment: AttachmentInput
  topicRootId: ID!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  messageTopicId: ID!
  messageOwnerId: ID
}

input UpdateMessageInput {
  id: ID!
  text: String
  attachment: AttachmentInput
  topicRootId: ID
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  messageTopicId: ID
  messageOwnerId: ID
}

input DeleteMessageInput {
  id: ID
}

input ModelMessageConditionInput {
  text: ModelStringInput
  topicRootId: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelMessageConditionInput]
  or: [ModelMessageConditionInput]
  not: ModelMessageConditionInput
}

type ModelActivityConnection @aws_api_key @aws_cognito_user_pools {
  items: [Activity]
  nextToken: String
}

input ModelActivityFilterInput {
  id: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelActivityFilterInput]
  or: [ModelActivityFilterInput]
  not: ModelActivityFilterInput
}

input CreateActivityInput {
  id: ID
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  activityMessageId: ID
  activityTopicId: ID
  activityMemberId: ID
  activityMentionId: ID
  activityUserId: ID
}

input UpdateActivityInput {
  id: ID!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  activityMessageId: ID
  activityTopicId: ID
  activityMemberId: ID
  activityMentionId: ID
  activityUserId: ID
}

input DeleteActivityInput {
  id: ID
}

input ModelActivityConditionInput {
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelActivityConditionInput]
  or: [ModelActivityConditionInput]
  not: ModelActivityConditionInput
}

type ModelNotificationConnection @aws_api_key @aws_cognito_user_pools {
  items: [Notification]
  nextToken: String
}

input ModelNotificationFilterInput {
  id: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelNotificationFilterInput]
  or: [ModelNotificationFilterInput]
  not: ModelNotificationFilterInput
}

input CreateNotificationInput {
  id: ID
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  notificationActivityId: ID
  notificationUserId: ID
}

input UpdateNotificationInput {
  id: ID!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  notificationActivityId: ID
  notificationUserId: ID
}

input DeleteNotificationInput {
  id: ID
}

input ModelNotificationConditionInput {
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelNotificationConditionInput]
  or: [ModelNotificationConditionInput]
  not: ModelNotificationConditionInput
}

input ModelStringKeyConditionInput {
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  between: [String]
  beginsWith: String
}
",
      },
      "Type": "AWS::AppSync::GraphQLSchema",
    },
    "onetaskundefinedappsyncTopicDSDS5D567DDE": Object {
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "Description": "Data Source for Topic Table",
        "DynamoDBConfig": Object {
          "AwsRegion": "eu-west-2",
          "TableName": Object {
            "Fn::ImportValue": "dynamodb:ExportsOutputReftopicsTable1799239239D89D2A",
          },
        },
        "Name": "TopicDS",
        "ServiceRoleArn": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncTopicDSDSServiceRoleCF97971B",
            "Arn",
          ],
        },
        "Type": "AMAZON_DYNAMODB",
      },
      "Type": "AWS::AppSync::DataSource",
    },
    "onetaskundefinedappsyncTopicDSDSActivitytopicResolverE519267D": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncSchema3C62815F",
        "onetaskundefinedappsyncTopicDSDS5D567DDE",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "TopicDS",
        "FieldName": "topic",
        "Kind": "UNIT",
        "RequestMappingTemplate": "{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"GetItem\\",
  \\"key\\": {
      \\"id\\": $util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank($ctx.source.activityTopicId, \\"___xamznone____\\"))
  }
}",
        "ResponseMappingTemplate": "## [Start] Determine request authentication mode **
#if( $util.isNullOrEmpty($authMode) && !$util.isNull($ctx.identity) && !$util.isNull($ctx.identity.sub) && !$util.isNull($ctx.identity.issuer) && !$util.isNull($ctx.identity.username) && !$util.isNull($ctx.identity.claims) && !$util.isNull($ctx.identity.sourceIp) )
  #set( $authMode = \\"userPools\\" )
#end
## [End] Determine request authentication mode **
## [Start] Check authMode and execute owner/group checks **
#if( $authMode == \\"userPools\\" )
  ## No Static Group Authorization Rules **


  ## No Dynamic Group Authorization Rules **


  ## [Start] Owner Authorization Checks **
  #set( $isOwnerAuthorized = $util.defaultIfNull($isOwnerAuthorized, false) )
  ## Authorization rule: { allow: owner, ownerField: \\"topicOwnerId\\", identityClaim: \\"preferred_username\\" } **
  #set( $allowedOwners0 = $ctx.result.topicOwnerId )
  #set( $identityValue = $util.defaultIfNull($ctx.identity.claims.get(\\"preferred_username\\"), \\"___xamznone____\\") )
  #if( $util.isList($allowedOwners0) )
    #foreach( $allowedOwner in $allowedOwners0 )
      #if( $allowedOwner == $identityValue )
        #set( $isOwnerAuthorized = true )
      #end
    #end
  #end
  #if( $util.isString($allowedOwners0) )
    #if( $allowedOwners0 == $identityValue )
      #set( $isOwnerAuthorized = true )
    #end
  #end
  ## [End] Owner Authorization Checks **


  ## [Start] Throw if unauthorized **
  #if( !($isStaticGroupAuthorized == true || $isDynamicGroupAuthorized == true || $isOwnerAuthorized == true) )
    $util.unauthorized()
  #end
  ## [End] Throw if unauthorized **
#end
## [End] Check authMode and execute owner/group checks **

$util.toJson($context.result)",
        "TypeName": "Activity",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsyncTopicDSDSMentiontopicResolver1A68C2FD": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncSchema3C62815F",
        "onetaskundefinedappsyncTopicDSDS5D567DDE",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "TopicDS",
        "FieldName": "topic",
        "Kind": "UNIT",
        "RequestMappingTemplate": "{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"GetItem\\",
  \\"key\\": {
      \\"id\\": $util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank($ctx.source.mentionTopicId, \\"___xamznone____\\"))
  }
}",
        "ResponseMappingTemplate": "## [Start] Determine request authentication mode **
#if( $util.isNullOrEmpty($authMode) && !$util.isNull($ctx.identity) && !$util.isNull($ctx.identity.sub) && !$util.isNull($ctx.identity.issuer) && !$util.isNull($ctx.identity.username) && !$util.isNull($ctx.identity.claims) && !$util.isNull($ctx.identity.sourceIp) )
  #set( $authMode = \\"userPools\\" )
#end
## [End] Determine request authentication mode **
## [Start] Check authMode and execute owner/group checks **
#if( $authMode == \\"userPools\\" )
  ## No Static Group Authorization Rules **


  ## No Dynamic Group Authorization Rules **


  ## [Start] Owner Authorization Checks **
  #set( $isOwnerAuthorized = $util.defaultIfNull($isOwnerAuthorized, false) )
  ## Authorization rule: { allow: owner, ownerField: \\"topicOwnerId\\", identityClaim: \\"preferred_username\\" } **
  #set( $allowedOwners0 = $ctx.result.topicOwnerId )
  #set( $identityValue = $util.defaultIfNull($ctx.identity.claims.get(\\"preferred_username\\"), \\"___xamznone____\\") )
  #if( $util.isList($allowedOwners0) )
    #foreach( $allowedOwner in $allowedOwners0 )
      #if( $allowedOwner == $identityValue )
        #set( $isOwnerAuthorized = true )
      #end
    #end
  #end
  #if( $util.isString($allowedOwners0) )
    #if( $allowedOwners0 == $identityValue )
      #set( $isOwnerAuthorized = true )
    #end
  #end
  ## [End] Owner Authorization Checks **


  ## [Start] Throw if unauthorized **
  #if( !($isStaticGroupAuthorized == true || $isDynamicGroupAuthorized == true || $isOwnerAuthorized == true) )
    $util.unauthorized()
  #end
  ## [End] Throw if unauthorized **
#end
## [End] Check authMode and execute owner/group checks **

$util.toJson($context.result)",
        "TypeName": "Mention",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsyncTopicDSDSMessagetopicResolver94F215F7": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncSchema3C62815F",
        "onetaskundefinedappsyncTopicDSDS5D567DDE",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "TopicDS",
        "FieldName": "topic",
        "Kind": "UNIT",
        "RequestMappingTemplate": "{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"GetItem\\",
  \\"key\\": {
      \\"id\\": $util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank($ctx.source.messageTopicId, \\"___xamznone____\\"))
  }
}",
        "ResponseMappingTemplate": "## [Start] Determine request authentication mode **
#if( $util.isNullOrEmpty($authMode) && !$util.isNull($ctx.identity) && !$util.isNull($ctx.identity.sub) && !$util.isNull($ctx.identity.issuer) && !$util.isNull($ctx.identity.username) && !$util.isNull($ctx.identity.claims) && !$util.isNull($ctx.identity.sourceIp) )
  #set( $authMode = \\"userPools\\" )
#end
## [End] Determine request authentication mode **
## [Start] Check authMode and execute owner/group checks **
#if( $authMode == \\"userPools\\" )
  ## No Static Group Authorization Rules **


  ## No Dynamic Group Authorization Rules **


  ## [Start] Owner Authorization Checks **
  #set( $isOwnerAuthorized = $util.defaultIfNull($isOwnerAuthorized, false) )
  ## Authorization rule: { allow: owner, ownerField: \\"topicOwnerId\\", identityClaim: \\"preferred_username\\" } **
  #set( $allowedOwners0 = $ctx.result.topicOwnerId )
  #set( $identityValue = $util.defaultIfNull($ctx.identity.claims.get(\\"preferred_username\\"), \\"___xamznone____\\") )
  #if( $util.isList($allowedOwners0) )
    #foreach( $allowedOwner in $allowedOwners0 )
      #if( $allowedOwner == $identityValue )
        #set( $isOwnerAuthorized = true )
      #end
    #end
  #end
  #if( $util.isString($allowedOwners0) )
    #if( $allowedOwners0 == $identityValue )
      #set( $isOwnerAuthorized = true )
    #end
  #end
  ## [End] Owner Authorization Checks **


  ## [Start] Throw if unauthorized **
  #if( !($isStaticGroupAuthorized == true || $isDynamicGroupAuthorized == true || $isOwnerAuthorized == true) )
    $util.unauthorized()
  #end
  ## [End] Throw if unauthorized **
#end
## [End] Check authMode and execute owner/group checks **

$util.toJson($context.result)",
        "TypeName": "Message",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsyncTopicDSDSMutationcreateTopicResolver059B503C": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncSchema3C62815F",
        "onetaskundefinedappsyncTopicDSDS5D567DDE",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "TopicDS",
        "FieldName": "createTopic",
        "Kind": "UNIT",
        "RequestMappingTemplate": "#### Custom
## Lines 23 changed to use sub claim
## Lines 41-48 to inject topic.topicOwnerId
## Lines 88-93 to default topic.rootTopicId to topic.id
####

## [Start] Determine request authentication mode **
#if( $util.isNullOrEmpty($authMode) && !$util.isNull($ctx.identity) && !$util.isNull($ctx.identity.sub) && !$util.isNull($ctx.identity.issuer) && !$util.isNull($ctx.identity.username) && !$util.isNull($ctx.identity.claims) && !$util.isNull($ctx.identity.sourceIp) )
  #set( $authMode = \\"userPools\\" )
#end
## [End] Determine request authentication mode **
## [Start] Check authMode and execute owner/group checks **
#if( $authMode == \\"userPools\\" )
  ## No Static Group Authorization Rules **


  ## No Dynamic Group Authorization Rules **


  ## [Start] Owner Authorization Checks **
  #set( $isOwnerAuthorized = false )
  ## Authorization rule: { allow: owner, ownerField: \\"owner\\", identityClaim: \\"cognito:username\\" } **
  #set( $allowedOwners0 = $util.defaultIfNull($ctx.args.input.owner, null) )
  #set( $identityValue = $util.defaultIfNull($ctx.identity.claims.get(\\"preferred_username\\"),'__ERROR__'))
  
  #if( $util.isList($allowedOwners0) )
    #foreach( $allowedOwner in $allowedOwners0 )
      #if( $allowedOwner == $identityValue )
        #set( $isOwnerAuthorized = true )
      #end
    #end
  #end
  #if( $util.isString($allowedOwners0) )
    #if( $allowedOwners0 == $identityValue )
      #set( $isOwnerAuthorized = true )
    #end
  #end

  ## [Start] Custom inject owner authorisation 
  ## DO NOT allow the client to nominate the resource owner - this should always come from the auth token
  ## Default codegen:
  ## #if( $util.isNull($allowedOwners0) && (! $ctx.args.input.containsKey(\\"owner\\")) )
  #if( !$util.isNull($identityValue) )
    ## If the $identityValue is not null then the token is as expected - set the input value and authorise
    $util.qr($ctx.args.input.put(\\"topicOwnerId\\", $identityValue))
    #set( $isOwnerAuthorized = true )
  #else
    ## The sub value is not in the auth token
    $util.error('Unable to get user id from token')
  #end

  ## [End] Custom inject owner authorisation 

  ## [End] Owner Authorization Checks **


  ## [Start] Throw if unauthorized **
  #if( !($isStaticGroupAuthorized == true || $isDynamicGroupAuthorized == true || $isOwnerAuthorized == true) )
    $util.unauthorized()
  #end
  ## [End] Throw if unauthorized **
#end
## [End] Check authMode and execute owner/group checks **

## [Start] Prepare DynamoDB PutItem Request. **
$util.qr($context.args.input.put(\\"createdAt\\", $util.defaultIfNull($ctx.args.input.createdAt, $util.time.nowISO8601())))
$util.qr($context.args.input.put(\\"updatedAt\\", $util.defaultIfNull($ctx.args.input.updatedAt, $util.time.nowISO8601())))
$util.qr($context.args.input.put(\\"__typename\\", \\"Topic\\"))
$util.qr($context.args.input.put(\\"keyField\\", \\"Topic\\"))

#set( $condition = {
  \\"expression\\": \\"attribute_not_exists(#id)\\",
  \\"expressionNames\\": {
      \\"#id\\": \\"id\\"
  }
} )
#if( $context.args.condition )
  #set( $condition.expressionValues = {} )
  #set( $conditionFilterExpressions = $util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition)) )
  $util.qr($condition.put(\\"expression\\", \\"($condition.expression) AND $conditionFilterExpressions.expression\\"))
  $util.qr($condition.expressionNames.putAll($conditionFilterExpressions.expressionNames))
  $util.qr($condition.expressionValues.putAll($conditionFilterExpressions.expressionValues))
#end
#if( $condition.expressionValues && $condition.expressionValues.size() == 0 )
  #set( $condition = {
  \\"expression\\": $condition.expression,
  \\"expressionNames\\": $condition.expressionNames
} )
#end

## Set the value of the rootTopicId to be same as topicId if its unset.
## A topic where id=rootTopicId is a root topic
#set($topicId = $util.autoId())
$util.qr($context.args.input.put(\\"isRoot\\", false))
$util.qr($context.args.input.put(\\"isDeleted\\", false))
#if( $util.isNull($context.args.input.get(\\"topicRootId\\")) )
  $util.qr($context.args.input.put(\\"topicRootId\\", $topicId))
  $util.qr($context.args.input.put(\\"isRoot\\", true))
#end
{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"PutItem\\",
  \\"key\\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {
  \\"id\\":   $util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank($ctx.args.input.id,$topicId ))
} #end,
  \\"attributeValues\\": $util.dynamodb.toMapValuesJson($context.args.input),
  \\"condition\\": $util.toJson($condition)
}
## [End] Prepare DynamoDB PutItem Request. **",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)",
        "TypeName": "Mutation",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsyncTopicDSDSMutationdeleteTopicResolver2BC46A69": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncSchema3C62815F",
        "onetaskundefinedappsyncTopicDSDS5D567DDE",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "TopicDS",
        "FieldName": "deleteTopic",
        "Kind": "UNIT",
        "RequestMappingTemplate": "
#if( $authCondition )
  #set( $condition = $authCondition )
  #if( $modelObjectKey )
    #foreach( $entry in $modelObjectKey.entrySet() )
      $util.qr($condition.put(\\"expression\\", \\"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\\"))
      $util.qr($condition.expressionNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
    #end
  #else
    $util.qr($condition.put(\\"expression\\", \\"$condition.expression AND attribute_exists(#id)\\"))
    $util.qr($condition.expressionNames.put(\\"#id\\", \\"id\\"))
  #end
#else
  #if( $modelObjectKey )
    #set( $condition = {
  \\"expression\\": \\"\\",
  \\"expressionNames\\": {}
} )
    #foreach( $entry in $modelObjectKey.entrySet() )
      #if( $velocityCount == 1 )
        $util.qr($condition.put(\\"expression\\", \\"attribute_exists(#keyCondition$velocityCount)\\"))
      #else
        $util.qr($condition.put(\\"expression\\", \\"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\\"))
      #end
      $util.qr($condition.expressionNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
    #end
  #else
    #set( $condition = {
  \\"expression\\": \\"attribute_exists(#id)\\",
  \\"expressionNames\\": {
      \\"#id\\": \\"id\\"
  }
} )
  #end
#end
#if( $versionedCondition )
  $util.qr($condition.put(\\"expression\\", \\"($condition.expression) AND $versionedCondition.expression\\"))
  $util.qr($condition.expressionNames.putAll($versionedCondition.expressionNames))
  #set( $expressionValues = $util.defaultIfNull($condition.expressionValues, {}) )
  $util.qr($expressionValues.putAll($versionedCondition.expressionValues))
  #set( $condition.expressionValues = $expressionValues )
#end
#if( $context.args.condition )
  #set( $conditionFilterExpressions = $util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition)) )
  $util.qr($condition.put(\\"expression\\", \\"($condition.expression) AND $conditionFilterExpressions.expression\\"))
  $util.qr($condition.expressionNames.putAll($conditionFilterExpressions.expressionNames))
  #set( $conditionExpressionValues = $util.defaultIfNull($condition.expressionValues, {}) )
  $util.qr($conditionExpressionValues.putAll($conditionFilterExpressions.expressionValues))
  #set( $condition.expressionValues = $conditionExpressionValues )
  $util.qr($condition.expressionValues.putAll($conditionFilterExpressions.expressionValues))
#end
#if( $condition.expressionValues && $condition.expressionValues.size() == 0 )
  #set( $condition = {
  \\"expression\\": $condition.expression,
  \\"expressionNames\\": $condition.expressionNames
} )
#end
{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"DeleteItem\\",
  \\"key\\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {
  \\"id\\": $util.dynamodb.toDynamoDBJson($ctx.args.input.id)
} #end,
  \\"condition\\": $util.toJson($condition)
}",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)",
        "TypeName": "Mutation",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsyncTopicDSDSMutationupdateTopicResolver1109654D": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncSchema3C62815F",
        "onetaskundefinedappsyncTopicDSDS5D567DDE",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "TopicDS",
        "FieldName": "updateTopic",
        "Kind": "UNIT",
        "RequestMappingTemplate": "#### CUSTOM
## Changed line 27 to use the token sub claim
##
####

## [Start] Determine request authentication mode **
#if( $util.isNullOrEmpty($authMode) && !$util.isNull($ctx.identity) && !$util.isNull($ctx.identity.sub) && !$util.isNull($ctx.identity.issuer) && !$util.isNull($ctx.identity.username) && !$util.isNull($ctx.identity.claims) && !$util.isNull($ctx.identity.sourceIp) )
  #set( $authMode = \\"userPools\\" )
#end
## [End] Determine request authentication mode **
## [Start] Check authMode and execute owner/group checks **
#if( $authMode == \\"userPools\\" )
  ## No Static Group Authorization Rules **


  #if( ! $isStaticGroupAuthorized )
    ## No dynamic group authorization rules **


    ## [Start] Owner Authorization Checks **
    #set( $ownerAuthExpressions = [] )
    #set( $ownerAuthExpressionValues = {} )
    #set( $ownerAuthExpressionNames = {} )
    ## Authorization rule: { allow: owner, ownerField: \\"topicOwnerId\\", identityClaim: \\"cognito:username\\" } **
    $util.qr($ownerAuthExpressions.add(\\"#owner0 = :identity0\\"))
    $util.qr($ownerAuthExpressionNames.put(\\"#owner0\\", \\"topicOwnerId\\"))
    $util.qr($ownerAuthExpressionValues.put(\\":identity0\\", $util.dynamodb.toDynamoDB($ctx.identity.claims.get(\\"preferred_username\\")) ) )
    ## [End] Owner Authorization Checks **


    ## [Start] Collect Auth Condition **
    #set( $authCondition = $util.defaultIfNull($authCondition, {
  \\"expression\\": \\"\\",
  \\"expressionNames\\": {},
  \\"expressionValues\\": {}
}) )
    #set( $totalAuthExpression = \\"\\" )
    ## Add dynamic group auth conditions if they exist **
    #if( $groupAuthExpressions )
      #foreach( $authExpr in $groupAuthExpressions )
        #set( $totalAuthExpression = \\"$totalAuthExpression $authExpr\\" )
        #if( $foreach.hasNext )
          #set( $totalAuthExpression = \\"$totalAuthExpression OR\\" )
        #end
      #end
    #end
    #if( $groupAuthExpressionNames )
      $util.qr($authCondition.expressionNames.putAll($groupAuthExpressionNames))
    #end
    #if( $groupAuthExpressionValues )
      $util.qr($authCondition.expressionValues.putAll($groupAuthExpressionValues))
    #end
    ## Add owner auth conditions if they exist **
    #if( $totalAuthExpression != \\"\\" && $ownerAuthExpressions && $ownerAuthExpressions.size() > 0 )
      #set( $totalAuthExpression = \\"$totalAuthExpression OR\\" )
    #end
    #if( $ownerAuthExpressions )
      #foreach( $authExpr in $ownerAuthExpressions )
        #set( $totalAuthExpression = \\"$totalAuthExpression $authExpr\\" )
        #if( $foreach.hasNext )
          #set( $totalAuthExpression = \\"$totalAuthExpression OR\\" )
        #end
      #end
    #end
    #if( $ownerAuthExpressionNames )
      $util.qr($authCondition.expressionNames.putAll($ownerAuthExpressionNames))
    #end
    #if( $ownerAuthExpressionValues )
      $util.qr($authCondition.expressionValues.putAll($ownerAuthExpressionValues))
    #end
    ## Set final expression if it has changed. **
    #if( $totalAuthExpression != \\"\\" )
      #if( $util.isNullOrEmpty($authCondition.expression) )
        #set( $authCondition.expression = \\"($totalAuthExpression)\\" )
      #else
        #set( $authCondition.expression = \\"$authCondition.expression AND ($totalAuthExpression)\\" )
      #end
    #end
    ## [End] Collect Auth Condition **
  #end


  ## [Start] Throw if unauthorized **
  #if( !($isStaticGroupAuthorized == true || ($totalAuthExpression != \\"\\")) )
    $util.unauthorized()
  #end
  ## [End] Throw if unauthorized **
#end
## [End] Check authMode and execute owner/group checks **

#if( $authCondition && $authCondition.expression != \\"\\" )
  #set( $condition = $authCondition )
  #if( $modelObjectKey )
    #foreach( $entry in $modelObjectKey.entrySet() )
      $util.qr($condition.put(\\"expression\\", \\"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\\"))
      $util.qr($condition.expressionNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
    #end
  #else
    $util.qr($condition.put(\\"expression\\", \\"$condition.expression AND attribute_exists(#id)\\"))
    $util.qr($condition.expressionNames.put(\\"#id\\", \\"id\\"))
  #end
#else
  #if( $modelObjectKey )
    #set( $condition = {
  \\"expression\\": \\"\\",
  \\"expressionNames\\": {},
  \\"expressionValues\\": {}
} )
    #foreach( $entry in $modelObjectKey.entrySet() )
      #if( $velocityCount == 1 )
        $util.qr($condition.put(\\"expression\\", \\"attribute_exists(#keyCondition$velocityCount)\\"))
      #else
        $util.qr($condition.put(\\"expression\\", \\"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\\"))
      #end
      $util.qr($condition.expressionNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
    #end
  #else
    #set( $condition = {
  \\"expression\\": \\"attribute_exists(#id)\\",
  \\"expressionNames\\": {
      \\"#id\\": \\"id\\"
  },
  \\"expressionValues\\": {}
} )
  #end
#end
## Automatically set the updatedAt timestamp. **
$util.qr($context.args.input.put(\\"updatedAt\\", $util.defaultIfNull($ctx.args.input.updatedAt, $util.time.nowISO8601())))
$util.qr($context.args.input.put(\\"__typename\\", \\"Topic\\"))
## Update condition if type is @versioned **
#if( $versionedCondition )
  $util.qr($condition.put(\\"expression\\", \\"($condition.expression) AND $versionedCondition.expression\\"))
  $util.qr($condition.expressionNames.putAll($versionedCondition.expressionNames))
  $util.qr($condition.expressionValues.putAll($versionedCondition.expressionValues))
#end
#if( $context.args.condition )
  #set( $conditionFilterExpressions = $util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition)) )
  $util.qr($condition.put(\\"expression\\", \\"($condition.expression) AND $conditionFilterExpressions.expression\\"))
  $util.qr($condition.expressionNames.putAll($conditionFilterExpressions.expressionNames))
  $util.qr($condition.expressionValues.putAll($conditionFilterExpressions.expressionValues))
#end
#if( $condition.expressionValues && $condition.expressionValues.size() == 0 )
  #set( $condition = {
  \\"expression\\": $condition.expression,
  \\"expressionNames\\": $condition.expressionNames
} )
#end
#set( $expNames = {} )
#set( $expValues = {} )
#set( $expSet = {} )
#set( $expAdd = {} )
#set( $expRemove = [] )
#if( $modelObjectKey )
  #set( $keyFields = [] )
  #foreach( $entry in $modelObjectKey.entrySet() )
    $util.qr($keyFields.add(\\"$entry.key\\"))
  #end
#else
  #set( $keyFields = [\\"id\\"] )
#end
#foreach( $entry in $util.map.copyAndRemoveAllKeys($context.args.input, $keyFields).entrySet() )
  #if( !$util.isNull($dynamodbNameOverrideMap) && $dynamodbNameOverrideMap.containsKey(\\"$entry.key\\") )
    #set( $entryKeyAttributeName = $dynamodbNameOverrideMap.get(\\"$entry.key\\") )
  #else
    #set( $entryKeyAttributeName = $entry.key )
  #end
  #if( $util.isNull($entry.value) )
    #set( $discard = $expRemove.add(\\"#$entryKeyAttributeName\\") )
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
  #else
    $util.qr($expSet.put(\\"#$entryKeyAttributeName\\", \\":$entryKeyAttributeName\\"))
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
    $util.qr($expValues.put(\\":$entryKeyAttributeName\\", $util.dynamodb.toDynamoDB($entry.value)))
  #end
#end
#set( $expression = \\"\\" )
#if( !$expSet.isEmpty() )
  #set( $expression = \\"SET\\" )
  #foreach( $entry in $expSet.entrySet() )
    #set( $expression = \\"$expression $entry.key = $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expAdd.isEmpty() )
  #set( $expression = \\"$expression ADD\\" )
  #foreach( $entry in $expAdd.entrySet() )
    #set( $expression = \\"$expression $entry.key $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expRemove.isEmpty() )
  #set( $expression = \\"$expression REMOVE\\" )
  #foreach( $entry in $expRemove )
    #set( $expression = \\"$expression $entry\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#set( $update = {} )
$util.qr($update.put(\\"expression\\", \\"$expression\\"))
#if( !$expNames.isEmpty() )
  $util.qr($update.put(\\"expressionNames\\", $expNames))
#end
#if( !$expValues.isEmpty() )
  $util.qr($update.put(\\"expressionValues\\", $expValues))
#end
{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"UpdateItem\\",
  \\"key\\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {
  \\"id\\": {
      \\"S\\": \\"$context.args.input.id\\"
  }
} #end,
  \\"update\\": $util.toJson($update),
  \\"condition\\": $util.toJson($condition)
}",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)",
        "TypeName": "Mutation",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsyncTopicDSDSServiceRoleCF97971B": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "appsync.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "onetaskundefinedappsyncTopicDSDSServiceRoleDefaultPolicy3E544EE5": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::ImportValue": "dynamodb:ExportsOutputFnGetAtttopicsTable17992392Arn1FC3C2C8",
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::ImportValue": "dynamodb:ExportsOutputFnGetAtttopicsTable17992392Arn1FC3C2C8",
                      },
                      "/index/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "onetaskundefinedappsyncTopicDSDSServiceRoleDefaultPolicy3E544EE5",
        "Roles": Array [
          Object {
            "Ref": "onetaskundefinedappsyncTopicDSDSServiceRoleCF97971B",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "onetaskundefinedappsyncTopicDSDSTopicMembertopicResolverF1D59716": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncSchema3C62815F",
        "onetaskundefinedappsyncTopicDSDS5D567DDE",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "TopicDS",
        "FieldName": "topic",
        "Kind": "UNIT",
        "RequestMappingTemplate": "{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"GetItem\\",
  \\"key\\": {
      \\"id\\": $util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank($ctx.source.topicMemberTopicId, \\"___xamznone____\\"))
  }
}",
        "ResponseMappingTemplate": "## [Start] Determine request authentication mode **
#if( $util.isNullOrEmpty($authMode) && !$util.isNull($ctx.identity) && !$util.isNull($ctx.identity.sub) && !$util.isNull($ctx.identity.issuer) && !$util.isNull($ctx.identity.username) && !$util.isNull($ctx.identity.claims) && !$util.isNull($ctx.identity.sourceIp) )
  #set( $authMode = \\"userPools\\" )
#end
## [End] Determine request authentication mode **
## [Start] Check authMode and execute owner/group checks **
#if( $authMode == \\"userPools\\" )
  ## No Static Group Authorization Rules **


  ## No Dynamic Group Authorization Rules **


  ## [Start] Owner Authorization Checks **
  #set( $isOwnerAuthorized = $util.defaultIfNull($isOwnerAuthorized, false) )
  ## Authorization rule: { allow: owner, ownerField: \\"topicOwnerId\\", identityClaim: \\"preferred_username\\" } **
  #set( $allowedOwners0 = $ctx.result.topicOwnerId )
  #set( $identityValue = $util.defaultIfNull($ctx.identity.claims.get(\\"preferred_username\\"), \\"___xamznone____\\") )
  #if( $util.isList($allowedOwners0) )
    #foreach( $allowedOwner in $allowedOwners0 )
      #if( $allowedOwner == $identityValue )
        #set( $isOwnerAuthorized = true )
      #end
    #end
  #end
  #if( $util.isString($allowedOwners0) )
    #if( $allowedOwners0 == $identityValue )
      #set( $isOwnerAuthorized = true )
    #end
  #end
  ## [End] Owner Authorization Checks **


  ## [Start] Throw if unauthorized **
  #if( !($isStaticGroupAuthorized == true || $isDynamicGroupAuthorized == true || $isOwnerAuthorized == true) )
    $util.unauthorized()
  #end
  ## [End] Throw if unauthorized **
#end
## [End] Check authMode and execute owner/group checks **

$util.toJson($context.result)",
        "TypeName": "TopicMember",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsyncTopicDSDSTopicchildrenResolver336C3862": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncSchema3C62815F",
        "onetaskundefinedappsyncTopicDSDS5D567DDE",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "TopicDS",
        "FieldName": "children",
        "Kind": "UNIT",
        "RequestMappingTemplate": "#set( $limit = $util.defaultIfNull($context.args.limit, 10) )
#set( $query = {
  \\"expression\\": \\"#connectionAttribute = :connectionAttribute\\",
  \\"expressionNames\\": {
      \\"#connectionAttribute\\": \\"topicParentId\\"
  },
  \\"expressionValues\\": {
      \\":connectionAttribute\\": {
          \\"S\\": \\"$context.source.id\\"
    }
  }
} )
{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"Query\\",
  \\"query\\":   $util.toJson($query),
  \\"scanIndexForward\\":   #if( $context.args.sortDirection )
    #if( $context.args.sortDirection == \\"ASC\\" )
true
    #else
false
    #end
  #else
true
  #end,
  \\"filter\\":   #if( $context.args.filter )
$util.transform.toDynamoDBFilterExpression($ctx.args.filter)
  #else
null
  #end,
  \\"limit\\": $limit,
  \\"nextToken\\":   #if( $context.args.nextToken )
\\"$context.args.nextToken\\"
  #else
null
  #end,
  \\"index\\": \\"gsi-TopicParent\\"
}",
        "ResponseMappingTemplate": "## [Start] Determine request authentication mode **
#if( $util.isNullOrEmpty($authMode) && !$util.isNull($ctx.identity) && !$util.isNull($ctx.identity.sub) && !$util.isNull($ctx.identity.issuer) && !$util.isNull($ctx.identity.username) && !$util.isNull($ctx.identity.claims) && !$util.isNull($ctx.identity.sourceIp) )
  #set( $authMode = \\"userPools\\" )
#end
## [End] Determine request authentication mode **
## [Start] Check authMode and execute owner/group checks **
#if( $authMode == \\"userPools\\" )
  ## No Static Group Authorization Rules **


  ## [Start] If not static group authorized, filter items **
  #if( !$isStaticGroupAuthorized )
    #set( $items = [] )
    #foreach( $item in $ctx.result.items )
      ## No Dynamic Group Authorization Rules **


      ## [Start] Owner Authorization Checks **
      #set( $isLocalOwnerAuthorized = false )
      ## Authorization rule: { allow: owner, ownerField: \\"topicOwnerId\\", identityClaim: \\"preferred_username\\" } **
      #set( $allowedOwners0 = $item.topicOwnerId )
      #set( $identityValue = $util.defaultIfNull($ctx.identity.claims.get(\\"preferred_username\\"), \\"___xamznone____\\") )
      #if( $util.isList($allowedOwners0) )
        #foreach( $allowedOwner in $allowedOwners0 )
          #if( $allowedOwner == $identityValue )
            #set( $isLocalOwnerAuthorized = true )
          #end
        #end
      #end
      #if( $util.isString($allowedOwners0) )
        #if( $allowedOwners0 == $identityValue )
          #set( $isLocalOwnerAuthorized = true )
        #end
      #end
      ## [End] Owner Authorization Checks **


      #if( ($isLocalDynamicGroupAuthorized == true || $isLocalOwnerAuthorized == true) )
        $util.qr($items.add($item))
      #end
    #end
    #set( $ctx.result.items = $items )
  #end
  ## [End] If not static group authorized, filter items **
#end
## [End] Check authMode and execute owner/group checks **

#if( !$result )
  #set( $result = $ctx.result )
#end
$util.toJson($result)",
        "TypeName": "Topic",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsyncTopicDSDSTopicnodesResolver868F2B91": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncSchema3C62815F",
        "onetaskundefinedappsyncTopicDSDS5D567DDE",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "TopicDS",
        "FieldName": "nodes",
        "Kind": "UNIT",
        "RequestMappingTemplate": "#set( $limit = $util.defaultIfNull($context.args.limit, 10) )
#set( $query = {
  \\"expression\\": \\"#connectionAttribute = :connectionAttribute\\",
  \\"expressionNames\\": {
      \\"#connectionAttribute\\": \\"topicRootId\\"
  },
  \\"expressionValues\\": {
      \\":connectionAttribute\\": {
          \\"S\\": \\"$context.source.id\\"
    }
  }
} )
{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"Query\\",
  \\"query\\":   $util.toJson($query),
  \\"scanIndexForward\\":   #if( $context.args.sortDirection )
    #if( $context.args.sortDirection == \\"ASC\\" )
true
    #else
false
    #end
  #else
true
  #end,
  \\"filter\\":   #if( $context.args.filter )
$util.transform.toDynamoDBFilterExpression($ctx.args.filter)
  #else
null
  #end,
  \\"limit\\": $limit,
  \\"nextToken\\":   #if( $context.args.nextToken )
\\"$context.args.nextToken\\"
  #else
null
  #end,
  \\"index\\": \\"gsi-TopicRoot\\"
}",
        "ResponseMappingTemplate": "## [Start] Determine request authentication mode **
#if( $util.isNullOrEmpty($authMode) && !$util.isNull($ctx.identity) && !$util.isNull($ctx.identity.sub) && !$util.isNull($ctx.identity.issuer) && !$util.isNull($ctx.identity.username) && !$util.isNull($ctx.identity.claims) && !$util.isNull($ctx.identity.sourceIp) )
  #set( $authMode = \\"userPools\\" )
#end
## [End] Determine request authentication mode **
## [Start] Check authMode and execute owner/group checks **
#if( $authMode == \\"userPools\\" )
  ## No Static Group Authorization Rules **


  ## [Start] If not static group authorized, filter items **
  #if( !$isStaticGroupAuthorized )
    #set( $items = [] )
    #foreach( $item in $ctx.result.items )
      ## No Dynamic Group Authorization Rules **


      ## [Start] Owner Authorization Checks **
      #set( $isLocalOwnerAuthorized = false )
      ## Authorization rule: { allow: owner, ownerField: \\"topicOwnerId\\", identityClaim: \\"preferred_username\\" } **
      #set( $allowedOwners0 = $item.topicOwnerId )
      #set( $identityValue = $util.defaultIfNull($ctx.identity.claims.get(\\"preferred_username\\"), \\"___xamznone____\\") )
      #if( $util.isList($allowedOwners0) )
        #foreach( $allowedOwner in $allowedOwners0 )
          #if( $allowedOwner == $identityValue )
            #set( $isLocalOwnerAuthorized = true )
          #end
        #end
      #end
      #if( $util.isString($allowedOwners0) )
        #if( $allowedOwners0 == $identityValue )
          #set( $isLocalOwnerAuthorized = true )
        #end
      #end
      ## [End] Owner Authorization Checks **


      #if( ($isLocalDynamicGroupAuthorized == true || $isLocalOwnerAuthorized == true) )
        $util.qr($items.add($item))
      #end
    #end
    #set( $ctx.result.items = $items )
  #end
  ## [End] If not static group authorized, filter items **
#end
## [End] Check authMode and execute owner/group checks **

#if( !$result )
  #set( $result = $ctx.result )
#end
$util.toJson($result)",
        "TypeName": "Topic",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsyncTopicDSDSTopicparentResolverF9F0EC33": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncSchema3C62815F",
        "onetaskundefinedappsyncTopicDSDS5D567DDE",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "TopicDS",
        "FieldName": "parent",
        "Kind": "UNIT",
        "RequestMappingTemplate": "{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"GetItem\\",
  \\"key\\": {
      \\"id\\": $util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank($ctx.source.topicParentId, \\"___xamznone____\\"))
  }
}",
        "ResponseMappingTemplate": "## [Start] Determine request authentication mode **
#if( $util.isNullOrEmpty($authMode) && !$util.isNull($ctx.identity) && !$util.isNull($ctx.identity.sub) && !$util.isNull($ctx.identity.issuer) && !$util.isNull($ctx.identity.username) && !$util.isNull($ctx.identity.claims) && !$util.isNull($ctx.identity.sourceIp) )
  #set( $authMode = \\"userPools\\" )
#end
## [End] Determine request authentication mode **
## [Start] Check authMode and execute owner/group checks **
#if( $authMode == \\"userPools\\" )
  ## No Static Group Authorization Rules **


  ## No Dynamic Group Authorization Rules **


  ## [Start] Owner Authorization Checks **
  #set( $isOwnerAuthorized = $util.defaultIfNull($isOwnerAuthorized, false) )
  ## Authorization rule: { allow: owner, ownerField: \\"topicOwnerId\\", identityClaim: \\"preferred_username\\" } **
  #set( $allowedOwners0 = $ctx.result.topicOwnerId )
  #set( $identityValue = $util.defaultIfNull($ctx.identity.claims.get(\\"preferred_username\\"), \\"___xamznone____\\") )
  #if( $util.isList($allowedOwners0) )
    #foreach( $allowedOwner in $allowedOwners0 )
      #if( $allowedOwner == $identityValue )
        #set( $isOwnerAuthorized = true )
      #end
    #end
  #end
  #if( $util.isString($allowedOwners0) )
    #if( $allowedOwners0 == $identityValue )
      #set( $isOwnerAuthorized = true )
    #end
  #end
  ## [End] Owner Authorization Checks **


  ## [Start] Throw if unauthorized **
  #if( !($isStaticGroupAuthorized == true || $isDynamicGroupAuthorized == true || $isOwnerAuthorized == true) )
    $util.unauthorized()
  #end
  ## [End] Throw if unauthorized **
#end
## [End] Check authMode and execute owner/group checks **

$util.toJson($context.result)",
        "TypeName": "Topic",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsyncTopicDSDSTopicrootResolverA3157FF5": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncSchema3C62815F",
        "onetaskundefinedappsyncTopicDSDS5D567DDE",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "TopicDS",
        "FieldName": "root",
        "Kind": "UNIT",
        "RequestMappingTemplate": "{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"GetItem\\",
  \\"key\\": {
      \\"id\\": $util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank($ctx.source.topicRootId, \\"___xamznone____\\"))
  }
}",
        "ResponseMappingTemplate": "## [Start] Determine request authentication mode **
#if( $util.isNullOrEmpty($authMode) && !$util.isNull($ctx.identity) && !$util.isNull($ctx.identity.sub) && !$util.isNull($ctx.identity.issuer) && !$util.isNull($ctx.identity.username) && !$util.isNull($ctx.identity.claims) && !$util.isNull($ctx.identity.sourceIp) )
  #set( $authMode = \\"userPools\\" )
#end
## [End] Determine request authentication mode **
## [Start] Check authMode and execute owner/group checks **
#if( $authMode == \\"userPools\\" )
  ## No Static Group Authorization Rules **


  ## No Dynamic Group Authorization Rules **


  ## [Start] Owner Authorization Checks **
  #set( $isOwnerAuthorized = $util.defaultIfNull($isOwnerAuthorized, false) )
  ## Authorization rule: { allow: owner, ownerField: \\"topicOwnerId\\", identityClaim: \\"preferred_username\\" } **
  #set( $allowedOwners0 = $ctx.result.topicOwnerId )
  #set( $identityValue = $util.defaultIfNull($ctx.identity.claims.get(\\"preferred_username\\"), \\"___xamznone____\\") )
  #if( $util.isList($allowedOwners0) )
    #foreach( $allowedOwner in $allowedOwners0 )
      #if( $allowedOwner == $identityValue )
        #set( $isOwnerAuthorized = true )
      #end
    #end
  #end
  #if( $util.isString($allowedOwners0) )
    #if( $allowedOwners0 == $identityValue )
      #set( $isOwnerAuthorized = true )
    #end
  #end
  ## [End] Owner Authorization Checks **


  ## [Start] Throw if unauthorized **
  #if( !($isStaticGroupAuthorized == true || $isDynamicGroupAuthorized == true || $isOwnerAuthorized == true) )
    $util.unauthorized()
  #end
  ## [End] Throw if unauthorized **
#end
## [End] Check authMode and execute owner/group checks **

$util.toJson($context.result)",
        "TypeName": "Topic",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsyncTopicDSDSUsertopicsResolverA2842C8B": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncSchema3C62815F",
        "onetaskundefinedappsyncTopicDSDS5D567DDE",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "TopicDS",
        "FieldName": "topics",
        "Kind": "UNIT",
        "RequestMappingTemplate": "#set( $limit = $util.defaultIfNull($context.args.limit, 10) )
#set( $query = {
  \\"expression\\": \\"#connectionAttribute = :connectionAttribute\\",
  \\"expressionNames\\": {
      \\"#connectionAttribute\\": \\"topicOwnerId\\"
  },
  \\"expressionValues\\": {
      \\":connectionAttribute\\": {
          \\"S\\": \\"$context.source.id\\"
    }
  }
} )
{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"Query\\",
  \\"query\\":   $util.toJson($query),
  \\"scanIndexForward\\":   #if( $context.args.sortDirection )
    #if( $context.args.sortDirection == \\"ASC\\" )
true
    #else
false
    #end
  #else
true
  #end,
  \\"filter\\":   #if( $context.args.filter )
$util.transform.toDynamoDBFilterExpression($ctx.args.filter)
  #else
null
  #end,
  \\"limit\\": $limit,
  \\"nextToken\\":   #if( $context.args.nextToken )
\\"$context.args.nextToken\\"
  #else
null
  #end,
  \\"index\\": \\"gsi-TopicOwner\\"
}",
        "ResponseMappingTemplate": "## [Start] Determine request authentication mode **
#if( $util.isNullOrEmpty($authMode) && !$util.isNull($ctx.identity) && !$util.isNull($ctx.identity.sub) && !$util.isNull($ctx.identity.issuer) && !$util.isNull($ctx.identity.username) && !$util.isNull($ctx.identity.claims) && !$util.isNull($ctx.identity.sourceIp) )
  #set( $authMode = \\"userPools\\" )
#end
## [End] Determine request authentication mode **
## [Start] Check authMode and execute owner/group checks **
#if( $authMode == \\"userPools\\" )
  ## No Static Group Authorization Rules **


  ## [Start] If not static group authorized, filter items **
  #if( !$isStaticGroupAuthorized )
    #set( $items = [] )
    #foreach( $item in $ctx.result.items )
      ## No Dynamic Group Authorization Rules **


      ## [Start] Owner Authorization Checks **
      #set( $isLocalOwnerAuthorized = false )
      ## Authorization rule: { allow: owner, ownerField: \\"topicOwnerId\\", identityClaim: \\"preferred_username\\" } **
      #set( $allowedOwners0 = $item.topicOwnerId )
      #set( $identityValue = $util.defaultIfNull($ctx.identity.claims.get(\\"preferred_username\\"), \\"___xamznone____\\") )
      #if( $util.isList($allowedOwners0) )
        #foreach( $allowedOwner in $allowedOwners0 )
          #if( $allowedOwner == $identityValue )
            #set( $isLocalOwnerAuthorized = true )
          #end
        #end
      #end
      #if( $util.isString($allowedOwners0) )
        #if( $allowedOwners0 == $identityValue )
          #set( $isLocalOwnerAuthorized = true )
        #end
      #end
      ## [End] Owner Authorization Checks **


      #if( ($isLocalDynamicGroupAuthorized == true || $isLocalOwnerAuthorized == true) )
        $util.qr($items.add($item))
      #end
    #end
    #set( $ctx.result.items = $items )
  #end
  ## [End] If not static group authorized, filter items **
#end
## [End] Check authMode and execute owner/group checks **

#if( !$result )
  #set( $result = $ctx.result )
#end
$util.toJson($result)",
        "TypeName": "User",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsynctopicMemberDSDSActivitymemberResolver2D171796": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncSchema3C62815F",
        "onetaskundefinedappsynctopicMemberDSDSD45E5D49",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "topicMemberDS",
        "FieldName": "member",
        "Kind": "UNIT",
        "RequestMappingTemplate": "{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"GetItem\\",
  \\"key\\": {
      \\"id\\": $util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank($ctx.source.activityMemberId, \\"___xamznone____\\"))
  }
}",
        "ResponseMappingTemplate": "$util.toJson($context.result)",
        "TypeName": "Activity",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsynctopicMemberDSDSD45E5D49": Object {
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "Description": "Data Source for Topic Member Table",
        "DynamoDBConfig": Object {
          "AwsRegion": "eu-west-2",
          "TableName": Object {
            "Fn::ImportValue": "dynamodb:ExportsOutputReftopicsMemberTableEAC2634F7251B2E8",
          },
        },
        "Name": "topicMemberDS",
        "ServiceRoleArn": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsynctopicMemberDSDSServiceRole0EF366CD",
            "Arn",
          ],
        },
        "Type": "AMAZON_DYNAMODB",
      },
      "Type": "AWS::AppSync::DataSource",
    },
    "onetaskundefinedappsynctopicMemberDSDSMutationcreateTopicMemberResolver66F95CF1": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncSchema3C62815F",
        "onetaskundefinedappsynctopicMemberDSDSD45E5D49",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "topicMemberDS",
        "FieldName": "createTopicMember",
        "Kind": "UNIT",
        "RequestMappingTemplate": "## [Start] Prepare DynamoDB PutItem Request. **
$util.qr($context.args.input.put(\\"createdAt\\", $util.defaultIfNull($ctx.args.input.createdAt, $util.time.nowISO8601())))
$util.qr($context.args.input.put(\\"updatedAt\\", $util.defaultIfNull($ctx.args.input.updatedAt, $util.time.nowISO8601())))
$util.qr($context.args.input.put(\\"__typename\\", \\"TopicMember\\"))
#set( $condition = {
  \\"expression\\": \\"attribute_not_exists(#id)\\",
  \\"expressionNames\\": {
      \\"#id\\": \\"id\\"
  }
} )
#if( $context.args.condition )
  #set( $condition.expressionValues = {} )
  #set( $conditionFilterExpressions = $util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition)) )
  $util.qr($condition.put(\\"expression\\", \\"($condition.expression) AND $conditionFilterExpressions.expression\\"))
  $util.qr($condition.expressionNames.putAll($conditionFilterExpressions.expressionNames))
  $util.qr($condition.expressionValues.putAll($conditionFilterExpressions.expressionValues))
#end
#if( $condition.expressionValues && $condition.expressionValues.size() == 0 )
  #set( $condition = {
  \\"expression\\": $condition.expression,
  \\"expressionNames\\": $condition.expressionNames
} )
#end
{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"PutItem\\",
  \\"key\\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {
  \\"id\\":   $util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank($ctx.args.input.id, $util.autoId()))
} #end,
  \\"attributeValues\\": $util.dynamodb.toMapValuesJson($context.args.input),
  \\"condition\\": $util.toJson($condition)
}
## [End] Prepare DynamoDB PutItem Request. **",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)",
        "TypeName": "Mutation",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsynctopicMemberDSDSMutationupdateTopicMemberResolver7DE285E8": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncSchema3C62815F",
        "onetaskundefinedappsynctopicMemberDSDSD45E5D49",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "topicMemberDS",
        "FieldName": "updateTopicMember",
        "Kind": "UNIT",
        "RequestMappingTemplate": "#if( $authCondition && $authCondition.expression != \\"\\" )
  #set( $condition = $authCondition )
  #if( $modelObjectKey )
    #foreach( $entry in $modelObjectKey.entrySet() )
      $util.qr($condition.put(\\"expression\\", \\"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\\"))
      $util.qr($condition.expressionNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
    #end
  #else
    $util.qr($condition.put(\\"expression\\", \\"$condition.expression AND attribute_exists(#id)\\"))
    $util.qr($condition.expressionNames.put(\\"#id\\", \\"id\\"))
  #end
#else
  #if( $modelObjectKey )
    #set( $condition = {
  \\"expression\\": \\"\\",
  \\"expressionNames\\": {},
  \\"expressionValues\\": {}
} )
    #foreach( $entry in $modelObjectKey.entrySet() )
      #if( $velocityCount == 1 )
        $util.qr($condition.put(\\"expression\\", \\"attribute_exists(#keyCondition$velocityCount)\\"))
      #else
        $util.qr($condition.put(\\"expression\\", \\"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\\"))
      #end
      $util.qr($condition.expressionNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
    #end
  #else
    #set( $condition = {
  \\"expression\\": \\"attribute_exists(#id)\\",
  \\"expressionNames\\": {
      \\"#id\\": \\"id\\"
  },
  \\"expressionValues\\": {}
} )
  #end
#end
## Automatically set the updatedAt timestamp. **
$util.qr($context.args.input.put(\\"updatedAt\\", $util.defaultIfNull($ctx.args.input.updatedAt, $util.time.nowISO8601())))
$util.qr($context.args.input.put(\\"__typename\\", \\"TopicMember\\"))
## Update condition if type is @versioned **
#if( $versionedCondition )
  $util.qr($condition.put(\\"expression\\", \\"($condition.expression) AND $versionedCondition.expression\\"))
  $util.qr($condition.expressionNames.putAll($versionedCondition.expressionNames))
  $util.qr($condition.expressionValues.putAll($versionedCondition.expressionValues))
#end
#if( $context.args.condition )
  #set( $conditionFilterExpressions = $util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition)) )
  $util.qr($condition.put(\\"expression\\", \\"($condition.expression) AND $conditionFilterExpressions.expression\\"))
  $util.qr($condition.expressionNames.putAll($conditionFilterExpressions.expressionNames))
  $util.qr($condition.expressionValues.putAll($conditionFilterExpressions.expressionValues))
#end
#if( $condition.expressionValues && $condition.expressionValues.size() == 0 )
  #set( $condition = {
  \\"expression\\": $condition.expression,
  \\"expressionNames\\": $condition.expressionNames
} )
#end
#set( $expNames = {} )
#set( $expValues = {} )
#set( $expSet = {} )
#set( $expAdd = {} )
#set( $expRemove = [] )
#if( $modelObjectKey )
  #set( $keyFields = [] )
  #foreach( $entry in $modelObjectKey.entrySet() )
    $util.qr($keyFields.add(\\"$entry.key\\"))
  #end
#else
  #set( $keyFields = [\\"id\\"] )
#end
#foreach( $entry in $util.map.copyAndRemoveAllKeys($context.args.input, $keyFields).entrySet() )
  #if( !$util.isNull($dynamodbNameOverrideMap) && $dynamodbNameOverrideMap.containsKey(\\"$entry.key\\") )
    #set( $entryKeyAttributeName = $dynamodbNameOverrideMap.get(\\"$entry.key\\") )
  #else
    #set( $entryKeyAttributeName = $entry.key )
  #end
  #if( $util.isNull($entry.value) )
    #set( $discard = $expRemove.add(\\"#$entryKeyAttributeName\\") )
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
  #else
    $util.qr($expSet.put(\\"#$entryKeyAttributeName\\", \\":$entryKeyAttributeName\\"))
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
    $util.qr($expValues.put(\\":$entryKeyAttributeName\\", $util.dynamodb.toDynamoDB($entry.value)))
  #end
#end
#set( $expression = \\"\\" )
#if( !$expSet.isEmpty() )
  #set( $expression = \\"SET\\" )
  #foreach( $entry in $expSet.entrySet() )
    #set( $expression = \\"$expression $entry.key = $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expAdd.isEmpty() )
  #set( $expression = \\"$expression ADD\\" )
  #foreach( $entry in $expAdd.entrySet() )
    #set( $expression = \\"$expression $entry.key $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expRemove.isEmpty() )
  #set( $expression = \\"$expression REMOVE\\" )
  #foreach( $entry in $expRemove )
    #set( $expression = \\"$expression $entry\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#set( $update = {} )
$util.qr($update.put(\\"expression\\", \\"$expression\\"))
#if( !$expNames.isEmpty() )
  $util.qr($update.put(\\"expressionNames\\", $expNames))
#end
#if( !$expValues.isEmpty() )
  $util.qr($update.put(\\"expressionValues\\", $expValues))
#end
{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"UpdateItem\\",
  \\"key\\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {
  \\"id\\": {
      \\"S\\": \\"$context.args.input.id\\"
  }
} #end,
  \\"update\\": $util.toJson($update),
  \\"condition\\": $util.toJson($condition)
}",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)",
        "TypeName": "Mutation",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsynctopicMemberDSDSQuerygetTopicMemberResolverB902F403": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncSchema3C62815F",
        "onetaskundefinedappsynctopicMemberDSDSD45E5D49",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "topicMemberDS",
        "FieldName": "getTopicMember",
        "Kind": "UNIT",
        "RequestMappingTemplate": "{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"GetItem\\",
  \\"key\\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {
  \\"id\\": $util.dynamodb.toDynamoDBJson($ctx.args.id)
} #end
}",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)",
        "TypeName": "Query",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsynctopicMemberDSDSQuerygetTopicResolver195D2A06": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncSchema3C62815F",
        "onetaskundefinedappsynctopicMemberDSDSD45E5D49",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "topicMemberDS",
        "FieldName": "getTopic",
        "Kind": "UNIT",
        "RequestMappingTemplate": "{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"GetItem\\",
  \\"key\\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {
  \\"id\\": $util.dynamodb.toDynamoDBJson($ctx.args.id)
} #end
}",
        "ResponseMappingTemplate": "#### CUSTOM
## Changed line 23 to use the token sub claim
##
####

## [Start] Determine request authentication mode **
#if( $util.isNullOrEmpty($authMode) && !$util.isNull($ctx.identity) && !$util.isNull($ctx.identity.sub) && !$util.isNull($ctx.identity.issuer) && !$util.isNull($ctx.identity.username) && !$util.isNull($ctx.identity.claims) && !$util.isNull($ctx.identity.sourceIp) )
  #set( $authMode = \\"userPools\\" )
#end
## [End] Determine request authentication mode **
## [Start] Check authMode and execute owner/group checks **
#if( $authMode == \\"userPools\\" )
  ## No Static Group Authorization Rules **


  ## No Dynamic Group Authorization Rules **


  ## [Start] Owner Authorization Checks **
  #set( $isOwnerAuthorized = $util.defaultIfNull($isOwnerAuthorized, false) )
  ## Authorization rule: { allow: owner, ownerField: \\"topicOwnerId\\", identityClaim: \\"sub\\" } **
  #set( $allowedOwners0 = $ctx.result.topicOwnerId )
  #set( $identityValue = $ctx.identity.claims.get(\\"preferred_username\\") )
  #if( $util.isList($allowedOwners0) )
    #foreach( $allowedOwner in $allowedOwners0 )
      #if( $allowedOwner == $identityValue )
        #set( $isOwnerAuthorized = true )
      #end
    #end
  #end
  #if( $util.isString($allowedOwners0) )
    #if( $allowedOwners0 == $identityValue )
      #set( $isOwnerAuthorized = true )
    #end
  #end
  ## [End] Owner Authorization Checks **


  ## [Start] Throw if unauthorized **
  #if( !($isStaticGroupAuthorized == true || $isDynamicGroupAuthorized == true || $isOwnerAuthorized == true) )
    $util.unauthorized()
  #end
  ## [End] Throw if unauthorized **
#end
## [End] Check authMode and execute owner/group checks **

$util.toJson($ctx.result)",
        "TypeName": "Query",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsynctopicMemberDSDSQuerylistTopicMembersResolverA19B02A9": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncSchema3C62815F",
        "onetaskundefinedappsynctopicMemberDSDSD45E5D49",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "topicMemberDS",
        "FieldName": "listTopicMembers",
        "Kind": "UNIT",
        "RequestMappingTemplate": "#set( $limit = $util.defaultIfNull($context.args.limit, 10) )
#set( $ListRequest = {
  \\"version\\": \\"2017-02-28\\",
  \\"limit\\": $limit
} )
#if( $context.args.nextToken )
  #set( $ListRequest.nextToken = \\"$context.args.nextToken\\" )
#end
#if( $context.args.filter )
  #set( $ListRequest.filter = $util.parseJson(\\"$util.transform.toDynamoDBFilterExpression($ctx.args.filter)\\") )
#end
#if( !$util.isNull($modelQueryExpression)
                        && !$util.isNullOrEmpty($modelQueryExpression.expression) )
  $util.qr($ListRequest.put(\\"operation\\", \\"Query\\"))
  $util.qr($ListRequest.put(\\"query\\", $modelQueryExpression))
  #if( !$util.isNull($ctx.args.sortDirection) && $ctx.args.sortDirection == \\"DESC\\" )
    #set( $ListRequest.scanIndexForward = false )
  #else
    #set( $ListRequest.scanIndexForward = true )
  #end
#else
  $util.qr($ListRequest.put(\\"operation\\", \\"Scan\\"))
#end
$util.toJson($ListRequest)",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)",
        "TypeName": "Query",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsynctopicMemberDSDSQuerylistTopicsResolverD4384751": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncSchema3C62815F",
        "onetaskundefinedappsynctopicMemberDSDSD45E5D49",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "topicMemberDS",
        "FieldName": "listTopics",
        "Kind": "UNIT",
        "RequestMappingTemplate": "#set( $limit = $util.defaultIfNull($context.args.limit, 10) )
#set( $ListRequest = {
  \\"version\\": \\"2017-02-28\\",
  \\"limit\\": $limit
} )
#if( $context.args.nextToken )
  #set( $ListRequest.nextToken = \\"$context.args.nextToken\\" )
#end
#if( $context.args.filter )
  #set( $ListRequest.filter = $util.parseJson(\\"$util.transform.toDynamoDBFilterExpression($ctx.args.filter)\\") )
#end
#if( !$util.isNull($modelQueryExpression)
                        && !$util.isNullOrEmpty($modelQueryExpression.expression) )
  $util.qr($ListRequest.put(\\"operation\\", \\"Query\\"))
  $util.qr($ListRequest.put(\\"query\\", $modelQueryExpression))
  #if( !$util.isNull($ctx.args.sortDirection) && $ctx.args.sortDirection == \\"DESC\\" )
    #set( $ListRequest.scanIndexForward = false )
  #else
    #set( $ListRequest.scanIndexForward = true )
  #end
#else
  $util.qr($ListRequest.put(\\"operation\\", \\"Scan\\"))
#end
$util.toJson($ListRequest)",
        "ResponseMappingTemplate": "## [Start] Determine request authentication mode **
#if( $util.isNullOrEmpty($authMode) && !$util.isNull($ctx.identity) && !$util.isNull($ctx.identity.sub) && !$util.isNull($ctx.identity.issuer) && !$util.isNull($ctx.identity.username) && !$util.isNull($ctx.identity.claims) && !$util.isNull($ctx.identity.sourceIp) )
  #set( $authMode = \\"userPools\\" )
#end
## [End] Determine request authentication mode **
## [Start] Check authMode and execute owner/group checks **
#if( $authMode == \\"userPools\\" )
  ## No Static Group Authorization Rules **


  ## [Start] If not static group authorized, filter items **
  #if( !$isStaticGroupAuthorized )
    #set( $items = [] )
    #foreach( $item in $ctx.result.items )
      ## No Dynamic Group Authorization Rules **


      ## [Start] Owner Authorization Checks **
      #set( $isLocalOwnerAuthorized = false )
      ## Authorization rule: { allow: owner, ownerField: \\"topicOwnerId\\", identityClaim: \\"preferred_username\\" } **
      #set( $allowedOwners0 = $item.topicOwnerId )
      #set( $identityValue = $util.defaultIfNull($ctx.identity.claims.get(\\"preferred_username\\"), \\"___xamznone____\\") )
      #if( $util.isList($allowedOwners0) )
        #foreach( $allowedOwner in $allowedOwners0 )
          #if( $allowedOwner == $identityValue )
            #set( $isLocalOwnerAuthorized = true )
          #end
        #end
      #end
      #if( $util.isString($allowedOwners0) )
        #if( $allowedOwners0 == $identityValue )
          #set( $isLocalOwnerAuthorized = true )
        #end
      #end
      ## [End] Owner Authorization Checks **


      #if( ($isLocalDynamicGroupAuthorized == true || $isLocalOwnerAuthorized == true) )
        $util.qr($items.add($item))
      #end
    #end
    #set( $ctx.result.items = $items )
  #end
  ## [End] If not static group authorized, filter items **
#end
## [End] Check authMode and execute owner/group checks **

$util.toJson($ctx.result)",
        "TypeName": "Query",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsynctopicMemberDSDSServiceRole0EF366CD": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "appsync.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "onetaskundefinedappsynctopicMemberDSDSServiceRoleDefaultPolicy4F2F570A": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::ImportValue": "dynamodb:ExportsOutputFnGetAtttopicsMemberTableEAC2634FArn0DAD7DD1",
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::ImportValue": "dynamodb:ExportsOutputFnGetAtttopicsMemberTableEAC2634FArn0DAD7DD1",
                      },
                      "/index/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "onetaskundefinedappsynctopicMemberDSDSServiceRoleDefaultPolicy4F2F570A",
        "Roles": Array [
          Object {
            "Ref": "onetaskundefinedappsynctopicMemberDSDSServiceRole0EF366CD",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "onetaskundefinedappsynctopicMemberDSDSTopicmembersResolverF908F7C8": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncSchema3C62815F",
        "onetaskundefinedappsynctopicMemberDSDSD45E5D49",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "topicMemberDS",
        "FieldName": "members",
        "Kind": "UNIT",
        "RequestMappingTemplate": "#set( $limit = $util.defaultIfNull($context.args.limit, 10) )
#set( $query = {
  \\"expression\\": \\"#connectionAttribute = :connectionAttribute\\",
  \\"expressionNames\\": {
      \\"#connectionAttribute\\": \\"topicMemberTopicId\\"
  },
  \\"expressionValues\\": {
      \\":connectionAttribute\\": {
          \\"S\\": \\"$context.source.id\\"
    }
  }
} )
{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"Query\\",
  \\"query\\":   $util.toJson($query),
  \\"scanIndexForward\\":   #if( $context.args.sortDirection )
    #if( $context.args.sortDirection == \\"ASC\\" )
true
    #else
false
    #end
  #else
true
  #end,
  \\"filter\\":   #if( $context.args.filter )
$util.transform.toDynamoDBFilterExpression($ctx.args.filter)
  #else
null
  #end,
  \\"limit\\": $limit,
  \\"nextToken\\":   #if( $context.args.nextToken )
\\"$context.args.nextToken\\"
  #else
null
  #end,
  \\"index\\": \\"gsi-TopicMemberTopic\\"
}",
        "ResponseMappingTemplate": "#if( !$result )
  #set( $result = $ctx.result )
#end
$util.toJson($result)",
        "TypeName": "Topic",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsynctopicMemberDSDSUsermembershipsResolverF8E06243": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncSchema3C62815F",
        "onetaskundefinedappsynctopicMemberDSDSD45E5D49",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "topicMemberDS",
        "FieldName": "memberships",
        "Kind": "UNIT",
        "RequestMappingTemplate": "#set( $limit = $util.defaultIfNull($context.args.limit, 10) )
#set( $query = {
  \\"expression\\": \\"#connectionAttribute = :connectionAttribute\\",
  \\"expressionNames\\": {
      \\"#connectionAttribute\\": \\"topicMemberUserId\\"
  },
  \\"expressionValues\\": {
      \\":connectionAttribute\\": {
          \\"S\\": \\"$context.source.id\\"
    }
  }
} )
{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"Query\\",
  \\"query\\":   $util.toJson($query),
  \\"scanIndexForward\\":   #if( $context.args.sortDirection )
    #if( $context.args.sortDirection == \\"ASC\\" )
true
    #else
false
    #end
  #else
true
  #end,
  \\"filter\\":   #if( $context.args.filter )
$util.transform.toDynamoDBFilterExpression($ctx.args.filter)
  #else
null
  #end,
  \\"limit\\": $limit,
  \\"nextToken\\":   #if( $context.args.nextToken )
\\"$context.args.nextToken\\"
  #else
null
  #end,
  \\"index\\": \\"gsi-TopicMemberUser\\"
}",
        "ResponseMappingTemplate": "#if( !$result )
  #set( $result = $ctx.result )
#end
$util.toJson($result)",
        "TypeName": "User",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsynctopicMemberLambdaDSDSE8E5010F": Object {
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "Description": "Lambda Data Source for Topic Member",
        "LambdaConfig": Object {
          "LambdaFunctionArn": Object {
            "Fn::GetAtt": Array [
              "deleteValidTopicMemberResolver161B8AA6",
              "Arn",
            ],
          },
        },
        "Name": "topicMemberLambdaDS",
        "ServiceRoleArn": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsynctopicMemberLambdaDSDSServiceRoleD2F46945",
            "Arn",
          ],
        },
        "Type": "AWS_LAMBDA",
      },
      "Type": "AWS::AppSync::DataSource",
    },
    "onetaskundefinedappsynctopicMemberLambdaDSDSMutationdeleteValidTopicMemberResolverAF4F02AD": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncSchema3C62815F",
        "onetaskundefinedappsynctopicMemberLambdaDSDSE8E5010F",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "topicMemberLambdaDS",
        "FieldName": "deleteValidTopicMember",
        "Kind": "UNIT",
        "RequestMappingTemplate": "## [Start] Stash resolver specific context.. **
$util.qr($ctx.stash.put(\\"typeName\\", \\"Mutation\\"))
$util.qr($ctx.stash.put(\\"fieldName\\", \\"deleteValidTopicMember\\"))
{}
## [End] Stash resolver specific context.. **",
        "ResponseMappingTemplate": "$util.toJson($ctx.prev.result)",
        "TypeName": "Mutation",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsynctopicMemberLambdaDSDSServiceRoleD2F46945": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "appsync.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "onetaskundefinedappsynctopicMemberLambdaDSDSServiceRoleDefaultPolicy99046B9C": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "deleteValidTopicMemberResolver161B8AA6",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "onetaskundefinedappsynctopicMemberLambdaDSDSServiceRoleDefaultPolicy99046B9C",
        "Roles": Array [
          Object {
            "Ref": "onetaskundefinedappsynctopicMemberLambdaDSDSServiceRoleD2F46945",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "onetaskundefinedappsyncuserDSDS9919E306": Object {
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "Description": "Data source for Users Table",
        "DynamoDBConfig": Object {
          "AwsRegion": "eu-west-2",
          "TableName": Object {
            "Fn::ImportValue": "dynamodb:ExportsOutputRefusersTable12EF4ADD78D2FEE5",
          },
        },
        "Name": "userDS",
        "ServiceRoleArn": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncuserDSDSServiceRoleBB56F444",
            "Arn",
          ],
        },
        "Type": "AMAZON_DYNAMODB",
      },
      "Type": "AWS::AppSync::DataSource",
    },
    "onetaskundefinedappsyncuserDSDSActivityuserResolver9BE3799C": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncSchema3C62815F",
        "onetaskundefinedappsyncuserDSDS9919E306",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "userDS",
        "FieldName": "user",
        "Kind": "UNIT",
        "RequestMappingTemplate": "{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"GetItem\\",
  \\"key\\": {
      \\"id\\": $util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank($ctx.source.activityUserId, \\"___xamznone____\\"))
  }
}",
        "ResponseMappingTemplate": "$util.toJson($context.result)",
        "TypeName": "Activity",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsyncuserDSDSMentionownerResolverBB56F805": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncSchema3C62815F",
        "onetaskundefinedappsyncuserDSDS9919E306",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "userDS",
        "FieldName": "owner",
        "Kind": "UNIT",
        "RequestMappingTemplate": "{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"GetItem\\",
  \\"key\\": {
      \\"id\\": $util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank($ctx.source.mentionOwnerId, \\"___xamznone____\\"))
  }
}",
        "ResponseMappingTemplate": "$util.toJson($context.result)",
        "TypeName": "Mention",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsyncuserDSDSMentiontargetResolverB680BBB4": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncSchema3C62815F",
        "onetaskundefinedappsyncuserDSDS9919E306",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "userDS",
        "FieldName": "target",
        "Kind": "UNIT",
        "RequestMappingTemplate": "{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"GetItem\\",
  \\"key\\": {
      \\"id\\": $util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank($ctx.source.mentionTargetId, \\"___xamznone____\\"))
  }
}",
        "ResponseMappingTemplate": "$util.toJson($context.result)",
        "TypeName": "Mention",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsyncuserDSDSMutationcreateUserResolverC35B6662": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncSchema3C62815F",
        "onetaskundefinedappsyncuserDSDS9919E306",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "userDS",
        "FieldName": "createUser",
        "Kind": "UNIT",
        "RequestMappingTemplate": "## [Start] Prepare DynamoDB PutItem Request. **
$util.qr($context.args.input.put(\\"createdAt\\", $util.defaultIfNull($ctx.args.input.createdAt, $util.time.nowISO8601())))
$util.qr($context.args.input.put(\\"updatedAt\\", $util.defaultIfNull($ctx.args.input.updatedAt, $util.time.nowISO8601())))
$util.qr($context.args.input.put(\\"__typename\\", \\"User\\"))
#set( $condition = {
  \\"expression\\": \\"attribute_not_exists(#id)\\",
  \\"expressionNames\\": {
      \\"#id\\": \\"id\\"
  }
} )
#if( $context.args.condition )
  #set( $condition.expressionValues = {} )
  #set( $conditionFilterExpressions = $util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition)) )
  $util.qr($condition.put(\\"expression\\", \\"($condition.expression) AND $conditionFilterExpressions.expression\\"))
  $util.qr($condition.expressionNames.putAll($conditionFilterExpressions.expressionNames))
  $util.qr($condition.expressionValues.putAll($conditionFilterExpressions.expressionValues))
#end
#if( $condition.expressionValues && $condition.expressionValues.size() == 0 )
  #set( $condition = {
  \\"expression\\": $condition.expression,
  \\"expressionNames\\": $condition.expressionNames
} )
#end
{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"PutItem\\",
  \\"key\\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {
  \\"id\\":   $util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank($ctx.args.input.id, $util.autoId()))
} #end,
  \\"attributeValues\\": $util.dynamodb.toMapValuesJson($context.args.input),
  \\"condition\\": $util.toJson($condition)
}
## [End] Prepare DynamoDB PutItem Request. **",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)",
        "TypeName": "Mutation",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsyncuserDSDSMutationdeleteUserResolver29431FC2": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncSchema3C62815F",
        "onetaskundefinedappsyncuserDSDS9919E306",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "userDS",
        "FieldName": "deleteUser",
        "Kind": "UNIT",
        "RequestMappingTemplate": "#if( $authCondition )
  #set( $condition = $authCondition )
  #if( $modelObjectKey )
    #foreach( $entry in $modelObjectKey.entrySet() )
      $util.qr($condition.put(\\"expression\\", \\"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\\"))
      $util.qr($condition.expressionNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
    #end
  #else
    $util.qr($condition.put(\\"expression\\", \\"$condition.expression AND attribute_exists(#id)\\"))
    $util.qr($condition.expressionNames.put(\\"#id\\", \\"id\\"))
  #end
#else
  #if( $modelObjectKey )
    #set( $condition = {
  \\"expression\\": \\"\\",
  \\"expressionNames\\": {}
} )
    #foreach( $entry in $modelObjectKey.entrySet() )
      #if( $velocityCount == 1 )
        $util.qr($condition.put(\\"expression\\", \\"attribute_exists(#keyCondition$velocityCount)\\"))
      #else
        $util.qr($condition.put(\\"expression\\", \\"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\\"))
      #end
      $util.qr($condition.expressionNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
    #end
  #else
    #set( $condition = {
  \\"expression\\": \\"attribute_exists(#id)\\",
  \\"expressionNames\\": {
      \\"#id\\": \\"id\\"
  }
} )
  #end
#end
#if( $versionedCondition )
  $util.qr($condition.put(\\"expression\\", \\"($condition.expression) AND $versionedCondition.expression\\"))
  $util.qr($condition.expressionNames.putAll($versionedCondition.expressionNames))
  #set( $expressionValues = $util.defaultIfNull($condition.expressionValues, {}) )
  $util.qr($expressionValues.putAll($versionedCondition.expressionValues))
  #set( $condition.expressionValues = $expressionValues )
#end
#if( $context.args.condition )
  #set( $conditionFilterExpressions = $util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition)) )
  $util.qr($condition.put(\\"expression\\", \\"($condition.expression) AND $conditionFilterExpressions.expression\\"))
  $util.qr($condition.expressionNames.putAll($conditionFilterExpressions.expressionNames))
  #set( $conditionExpressionValues = $util.defaultIfNull($condition.expressionValues, {}) )
  $util.qr($conditionExpressionValues.putAll($conditionFilterExpressions.expressionValues))
  #set( $condition.expressionValues = $conditionExpressionValues )
  $util.qr($condition.expressionValues.putAll($conditionFilterExpressions.expressionValues))
#end
#if( $condition.expressionValues && $condition.expressionValues.size() == 0 )
  #set( $condition = {
  \\"expression\\": $condition.expression,
  \\"expressionNames\\": $condition.expressionNames
} )
#end
{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"DeleteItem\\",
  \\"key\\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {
  \\"id\\": $util.dynamodb.toDynamoDBJson($ctx.args.input.id)
} #end,
  \\"condition\\": $util.toJson($condition)
}",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)",
        "TypeName": "Mutation",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsyncuserDSDSMutationupdateUserResolver31943DC2": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncSchema3C62815F",
        "onetaskundefinedappsyncuserDSDS9919E306",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "userDS",
        "FieldName": "updateUser",
        "Kind": "UNIT",
        "RequestMappingTemplate": "#if( $authCondition && $authCondition.expression != \\"\\" )
  #set( $condition = $authCondition )
  #if( $modelObjectKey )
    #foreach( $entry in $modelObjectKey.entrySet() )
      $util.qr($condition.put(\\"expression\\", \\"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\\"))
      $util.qr($condition.expressionNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
    #end
  #else
    $util.qr($condition.put(\\"expression\\", \\"$condition.expression AND attribute_exists(#id)\\"))
    $util.qr($condition.expressionNames.put(\\"#id\\", \\"id\\"))
  #end
#else
  #if( $modelObjectKey )
    #set( $condition = {
  \\"expression\\": \\"\\",
  \\"expressionNames\\": {},
  \\"expressionValues\\": {}
} )
    #foreach( $entry in $modelObjectKey.entrySet() )
      #if( $velocityCount == 1 )
        $util.qr($condition.put(\\"expression\\", \\"attribute_exists(#keyCondition$velocityCount)\\"))
      #else
        $util.qr($condition.put(\\"expression\\", \\"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\\"))
      #end
      $util.qr($condition.expressionNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
    #end
  #else
    #set( $condition = {
  \\"expression\\": \\"attribute_exists(#id)\\",
  \\"expressionNames\\": {
      \\"#id\\": \\"id\\"
  },
  \\"expressionValues\\": {}
} )
  #end
#end
## Automatically set the updatedAt timestamp. **
$util.qr($context.args.input.put(\\"updatedAt\\", $util.defaultIfNull($ctx.args.input.updatedAt, $util.time.nowISO8601())))
$util.qr($context.args.input.put(\\"__typename\\", \\"User\\"))
## Update condition if type is @versioned **
#if( $versionedCondition )
  $util.qr($condition.put(\\"expression\\", \\"($condition.expression) AND $versionedCondition.expression\\"))
  $util.qr($condition.expressionNames.putAll($versionedCondition.expressionNames))
  $util.qr($condition.expressionValues.putAll($versionedCondition.expressionValues))
#end
#if( $context.args.condition )
  #set( $conditionFilterExpressions = $util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition)) )
  $util.qr($condition.put(\\"expression\\", \\"($condition.expression) AND $conditionFilterExpressions.expression\\"))
  $util.qr($condition.expressionNames.putAll($conditionFilterExpressions.expressionNames))
  $util.qr($condition.expressionValues.putAll($conditionFilterExpressions.expressionValues))
#end
#if( $condition.expressionValues && $condition.expressionValues.size() == 0 )
  #set( $condition = {
  \\"expression\\": $condition.expression,
  \\"expressionNames\\": $condition.expressionNames
} )
#end
#set( $expNames = {} )
#set( $expValues = {} )
#set( $expSet = {} )
#set( $expAdd = {} )
#set( $expRemove = [] )
#if( $modelObjectKey )
  #set( $keyFields = [] )
  #foreach( $entry in $modelObjectKey.entrySet() )
    $util.qr($keyFields.add(\\"$entry.key\\"))
  #end
#else
  #set( $keyFields = [\\"id\\"] )
#end
#foreach( $entry in $util.map.copyAndRemoveAllKeys($context.args.input, $keyFields).entrySet() )
  #if( !$util.isNull($dynamodbNameOverrideMap) && $dynamodbNameOverrideMap.containsKey(\\"$entry.key\\") )
    #set( $entryKeyAttributeName = $dynamodbNameOverrideMap.get(\\"$entry.key\\") )
  #else
    #set( $entryKeyAttributeName = $entry.key )
  #end
  #if( $util.isNull($entry.value) )
    #set( $discard = $expRemove.add(\\"#$entryKeyAttributeName\\") )
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
  #else
    $util.qr($expSet.put(\\"#$entryKeyAttributeName\\", \\":$entryKeyAttributeName\\"))
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
    $util.qr($expValues.put(\\":$entryKeyAttributeName\\", $util.dynamodb.toDynamoDB($entry.value)))
  #end
#end
#set( $expression = \\"\\" )
#if( !$expSet.isEmpty() )
  #set( $expression = \\"SET\\" )
  #foreach( $entry in $expSet.entrySet() )
    #set( $expression = \\"$expression $entry.key = $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expAdd.isEmpty() )
  #set( $expression = \\"$expression ADD\\" )
  #foreach( $entry in $expAdd.entrySet() )
    #set( $expression = \\"$expression $entry.key $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expRemove.isEmpty() )
  #set( $expression = \\"$expression REMOVE\\" )
  #foreach( $entry in $expRemove )
    #set( $expression = \\"$expression $entry\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#set( $update = {} )
$util.qr($update.put(\\"expression\\", \\"$expression\\"))
#if( !$expNames.isEmpty() )
  $util.qr($update.put(\\"expressionNames\\", $expNames))
#end
#if( !$expValues.isEmpty() )
  $util.qr($update.put(\\"expressionValues\\", $expValues))
#end
{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"UpdateItem\\",
  \\"key\\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {
  \\"id\\": {
      \\"S\\": \\"$context.args.input.id\\"
  }
} #end,
  \\"update\\": $util.toJson($update),
  \\"condition\\": $util.toJson($condition)
}",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)",
        "TypeName": "Mutation",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsyncuserDSDSNotificationuserResolverACE75B1F": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncSchema3C62815F",
        "onetaskundefinedappsyncuserDSDS9919E306",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "userDS",
        "FieldName": "user",
        "Kind": "UNIT",
        "RequestMappingTemplate": "{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"GetItem\\",
  \\"key\\": {
      \\"id\\": $util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank($ctx.source.notificationUserId, \\"___xamznone____\\"))
  }
}",
        "ResponseMappingTemplate": "$util.toJson($context.result)",
        "TypeName": "Notification",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsyncuserDSDSQuerygetUserResolver1E8063F1": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncSchema3C62815F",
        "onetaskundefinedappsyncuserDSDS9919E306",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "userDS",
        "FieldName": "getUser",
        "Kind": "UNIT",
        "RequestMappingTemplate": "{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"GetItem\\",
  \\"key\\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {
  \\"id\\": $util.dynamodb.toDynamoDBJson($ctx.args.id)
} #end
}",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)",
        "TypeName": "Query",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsyncuserDSDSQuerylistUsersResolver25958C44": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncSchema3C62815F",
        "onetaskundefinedappsyncuserDSDS9919E306",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "userDS",
        "FieldName": "listUsers",
        "Kind": "UNIT",
        "RequestMappingTemplate": "#set( $limit = $util.defaultIfNull($context.args.limit, 10) )
#set( $ListRequest = {
  \\"version\\": \\"2017-02-28\\",
  \\"limit\\": $limit
} )
#if( $context.args.nextToken )
  #set( $ListRequest.nextToken = \\"$context.args.nextToken\\" )
#end
#if( $context.args.filter )
  #set( $ListRequest.filter = $util.parseJson(\\"$util.transform.toDynamoDBFilterExpression($ctx.args.filter)\\") )
#end
#if( !$util.isNull($modelQueryExpression)
                        && !$util.isNullOrEmpty($modelQueryExpression.expression) )
  $util.qr($ListRequest.put(\\"operation\\", \\"Query\\"))
  $util.qr($ListRequest.put(\\"query\\", $modelQueryExpression))
  #if( !$util.isNull($ctx.args.sortDirection) && $ctx.args.sortDirection == \\"DESC\\" )
    #set( $ListRequest.scanIndexForward = false )
  #else
    #set( $ListRequest.scanIndexForward = true )
  #end
#else
  $util.qr($ListRequest.put(\\"operation\\", \\"Scan\\"))
#end
$util.toJson($ListRequest)",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)",
        "TypeName": "Query",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsyncuserDSDSServiceRoleBB56F444": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "appsync.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "onetaskundefinedappsyncuserDSDSServiceRoleDefaultPolicy9A30D08C": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::ImportValue": "dynamodb:ExportsOutputFnGetAttusersTable12EF4ADDArn6C20E190",
                },
                Object {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "onetaskundefinedappsyncuserDSDSServiceRoleDefaultPolicy9A30D08C",
        "Roles": Array [
          Object {
            "Ref": "onetaskundefinedappsyncuserDSDSServiceRoleBB56F444",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "onetaskundefinedappsyncuserDSDSTopicMemberuserResolver0C083500": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncSchema3C62815F",
        "onetaskundefinedappsyncuserDSDS9919E306",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "userDS",
        "FieldName": "user",
        "Kind": "UNIT",
        "RequestMappingTemplate": "{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"GetItem\\",
  \\"key\\": {
      \\"id\\": $util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank($ctx.source.topicMemberUserId, \\"___xamznone____\\"))
  }
}",
        "ResponseMappingTemplate": "$util.toJson($context.result)",
        "TypeName": "TopicMember",
      },
      "Type": "AWS::AppSync::Resolver",
    },
    "onetaskundefinedappsyncuserDSDSTopicownerResolver948E4759": Object {
      "DependsOn": Array [
        "onetaskundefinedappsyncSchema3C62815F",
        "onetaskundefinedappsyncuserDSDS9919E306",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Fn::GetAtt": Array [
            "onetaskundefinedappsyncFF22C18A",
            "ApiId",
          ],
        },
        "DataSourceName": "userDS",
        "FieldName": "owner",
        "Kind": "UNIT",
        "RequestMappingTemplate": "{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"GetItem\\",
  \\"key\\": {
      \\"id\\": $util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank($ctx.source.topicOwnerId, \\"___xamznone____\\"))
  }
}",
        "ResponseMappingTemplate": "$util.toJson($context.result)",
        "TypeName": "Topic",
      },
      "Type": "AWS::AppSync::Resolver",
    },
  },
}
`;
